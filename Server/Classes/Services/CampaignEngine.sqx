/*
 * Name:	Campaign
 * Date:	2020-06-24
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A Friction Campaign.
 */

using Sqx.Services;
using Mission.Communication;
using Mission.Common;

namespace Mission.Server
{
	public class CampaignEngine : Service
	{
		private fields ["_mBaseMarkersConfig" as IBaseMarkersConfig, "_mServerActionHandler" as ServerActionHandler, "_mCampaign" as Campaign, "_mMissionUnitsHandler" as MissionUnitsHandler, "_mWestlyUnits" as Array, "_mEastlyUnits" as Array, "_mAiUnitsWestCount" as Scalar, "_mAiUnitsEastCount" as Scalar];
		private fields ["_mCurrentMission" as Mission, "_mEastHasInserted" as Boolean, "_mWestHasInserted" as Boolean, "_mMissionMarkersInfo" as MissionMarkersInfo];
		private fields ["_mWestPrimaryObjectiveCompleted" as Boolean, "_mWestSecondaryObjectiveCompleted" as Boolean, "_mWestReturnObjectiveCompleted" as Boolean, "_mEastPrimaryObjectiveCompleted" as Boolean, "_mEastSecondaryObjectiveCompleted" as Boolean, "_mEastReturnObjectiveCompleted" as Boolean];
		private fields ["_mGainedTokensWest" as Array /* of HistoryToken */, "_mLostTokensWest" as Array, "_mGainedTokensEast" as Array, "_mLostTokensEast" as Array];
	
		// Creates a Campaign object.
		public constructor("_baseMarkersConfig" as IBaseMarkersConfig, "_missionUnitsHandler" as MissionUnitsHandler, "_campaign" as Campaign, "_aiUnitsWestCount" as Scalar, "_aiUnitsEastCount" as Scalar)
		{
			call _base.Constructor;
			
			_mBaseMarkersConfig = _baseMarkersConfig;
			_mMissionUnitsHandler = _missionUnitsHandler;
			_mCampaign = _campaign;
			_mAiUnitsWestCount = _aiUnitsWestCount;
			_mAiUnitsEastCount = _aiUnitsEastCount;
			
			_mServerActionHandler = new ServerActionHandler;
			
			call _self.ClearAllMapMarkers;
		};
		
		private method ClearAllMapMarkers()
		{
			{
				_x setMarkerAlpha 0;
			} foreach allMapMarkers as String;
		};
		
		private method NotifyClientsAboutMissionStart("_mission" as Mission)
		{
			private ["_startMarkers" as Array /* of MarkerInfo */, "_markers" as Array /* of MarkerInfo */];
			
			_startMarkers = [];
			_markers = [];
			
			{
				_startMarkers pushBack [_x, west] new MarkerInfo;
			} foreach [west] call _mission.GetStartMarkers as String;
			
			{
				_startMarkers pushBack [_x, east] new MarkerInfo;
			} foreach [east] call _mission.GetStartMarkers as String;
			
			{
				_markers pushBack [_x, west] new MarkerInfo;
			} foreach [west] call _mission.GetMarkersBySide as String;
			
			{
				_markers pushBack [_x, east] new MarkerInfo;
			} foreach [east] call _mission.GetMarkersBySide as String;
			
			_mMissionMarkersInfo = [_startMarkers, _markers, [west] call _mission.CheckSideHasExtractionMarker, [east] call _mission.CheckSideHasExtractionMarker] new MissionMarkersInfo;
		
			[_mMissionMarkersInfo] call PublicVariableHandler.BroadcastMissionMarkersInfo;
			["ClientEventReciever.OnMissionSetup", [_mMissionMarkersInfo]] call Remote.Invoke;
		};
		
		private method InsertSideWithNoPlayers("_missionMarkersInfo" as MissionMarkersInfo)
		{
			private ["_markerInfos" as Array, "_marker" as String];
			
			{
				private _side = _x;
				private _playersCount = 0;
				
				{
					if (side group _x == _side) then {
						_playersCount = _playersCount + 1;
					};
				} foreach call BIS_fnc_listPlayers;
				
				if (_playersCount == 0) then
				{
					// If no insertion markers are specified, perform insertion immediately
					_markerInfos = [_side] call _missionMarkersInfo.GetStartMarkersBySide;

					if (count _markerInfos > 0) then {
						_marker = _markerInfos select 0;
					}
					else {
						_marker = [_side, BaseMarker.Respawn] call _mBaseMarkersConfig.GetMarkerName;
					};
					
					private _switchableUnits = call _mMissionUnitsHandler.GetSwitchableUnits;
					
					{
						if (side group _x == _side) then {
							_x setPos getMarkerPos _marker;
						};
					} foreach _switchableUnits as Object;
				};
			} foreach [west, east] as Side;
		};
		
		private method NotifyAboutMissionBriefing("_mission" as Mission)
		{
			private ["_missionBriefing" as MissionBriefing];
		
			private _briefingInfoWest = [west] call _mission.GetBriefingInfo;
			private _briefingInfoEast = [east] call _mission.GetBriefingInfo;
			private _westPrimaryObjective = [west, ObjectivePrio.Primary] call _mission.GetMissionObjective;
			private _westSecondaryObjective = [west, ObjectivePrio.Secondary] call _mission.GetMissionObjective;
			private _westReturnObjective = [west, ObjectivePrio.Return] call _mission.GetMissionObjective;
			private _eastPrimaryObjective = [east, ObjectivePrio.Primary] call _mission.GetMissionObjective;
			private _eastSecondaryObjective = [east, ObjectivePrio.Secondary] call _mission.GetMissionObjective;
			private _eastReturnObjective = [east, ObjectivePrio.Return] call _mission.GetMissionObjective;

			_missionBriefing = [_mission.Name, _briefingInfoWest, _westPrimaryObjective, _westSecondaryObjective, _westReturnObjective, _briefingInfoEast, _eastPrimaryObjective, _eastSecondaryObjective, _eastReturnObjective] new MissionBriefing;

			[_missionBriefing] call PublicVariableHandler.BroadcastMissionBriefing;
			["ClientEventReciever.OnMissionBriefing", [_missionBriefing]] call Remote.Invoke;
		};

		public method InsertGroup("_side" as Side, "_position" as Array)
		{
			private _group = grpNull;
			{
				if (side group _x == _side) then {
					_group = group _x;
				};
			} foreach (call _mMissionUnitsHandler.GetSwitchableUnits);
			
			if (_side == west) then
			{
				if (!_mWestHasInserted) then
				{
					if (!isNull _group) then {
						[_group, _position] call _mCurrentMission.InsertGroup;
						_mWestlyUnits = units _group;
					};
					
					_mWestHasInserted = true;
					[true] call PublicVariableHandler.BroadcastWestHasInserted;
					[_mWestlyUnits] call PublicVariableHandler.BroadcastInsertedWestlyUnits;
				};
			}
			else // East
			{
				if (!_mEastHasInserted) then
				{
					if (!isNull _group) then {
						[_group, _position] call _mCurrentMission.InsertGroup;
						_mEastlyUnits = units _group;
					};
					
					_mEastHasInserted = true;
					[true] call PublicVariableHandler.BroadcastEastHasInserted;
					[_mEastlyUnits] call PublicVariableHandler.BroadcastInsertedEastlyUnits;
				};
			};
		};
		
		public method OnAction("_serverActionId" as Scalar, "_target" as Object, "_caller" as Object)
		{
			[_serverActionId, _target, _caller] call _mCurrentMission.OnAction;
		};
		
		private method Boolean AllUnitsAreDead()
		{
			if ((count _mEastlyUnits) + (count _mWestlyUnits) == 0) then {
				return false;
			};
		
			{
				if (alive _x) then {
					return false;
				};
			} foreach _mWestlyUnits as Object;
			
			{
				if (alive _x) then {
					return false;
				};
			} foreach _mEastlyUnits as Object;
			
			return true;
		};
		
		private method CheckAndNotifyObjectives("_mission" as Mission)
		{
			private ["_state" as ObjectiveState];
			
			// West
			
			if (!_mWestPrimaryObjectiveCompleted) then {
				_state = [west, ObjectivePrio.Primary] call _mission.CheckObjectiveState;
				
				if (_state != ObjectiveState.None) then {
					["ClientEventReciever.OnTaskStateChanged", [west, ObjectivePrio.Primary, _state]] call Remote.Invoke;
					_mWestPrimaryObjectiveCompleted = true;
				};
			};
		
			if (!_mWestSecondaryObjectiveCompleted) then {
				_state = [west, ObjectivePrio.Secondary] call _mission.CheckObjectiveState;
				
				if (_state != ObjectiveState.None) then {
					["ClientEventReciever.OnTaskStateChanged", [west, ObjectivePrio.Secondary, _state]] call Remote.Invoke;
					_mWestSecondaryObjectiveCompleted = true;
				};
			};
		
			if (!_mWestReturnObjectiveCompleted) then {
				_state = [west, ObjectivePrio.Return] call _mission.CheckObjectiveState;
				
				if (_state != ObjectiveState.None) then {
					["ClientEventReciever.OnTaskStateChanged", [west, ObjectivePrio.Return, _state]] call Remote.Invoke;
					_mWestReturnObjectiveCompleted = true;
				};
			};
			
			// East
			
			if (!_mEastPrimaryObjectiveCompleted) then {
				_state = [east, ObjectivePrio.Primary] call _mission.CheckObjectiveState;
				
				if (_state != ObjectiveState.None) then {
					["ClientEventReciever.OnTaskStateChanged", [east, ObjectivePrio.Primary, _state]] call Remote.Invoke;
					_mEastPrimaryObjectiveCompleted = true;
				};
			};
		
			if (!_mEastSecondaryObjectiveCompleted) then {
				_state = [east, ObjectivePrio.Secondary] call _mission.CheckObjectiveState;
				
				if (_state != ObjectiveState.None) then {
					["ClientEventReciever.OnTaskStateChanged", [east, ObjectivePrio.Secondary, _state]] call Remote.Invoke;
					_mEastSecondaryObjectiveCompleted = true;
				};
			};
		
			if (!_mEastReturnObjectiveCompleted) then {
				_state = [east, ObjectivePrio.Return] call _mission.CheckObjectiveState;
				
				if (_state != ObjectiveState.None) then {
					["ClientEventReciever.OnTaskStateChanged", [east, ObjectivePrio.Return, _state]] call Remote.Invoke;
					_mEastReturnObjectiveCompleted = true;
				};
			};
		};
		
		private method SaveHistoryTokens("_mission" as Mission)
		{
			if (([MissionSide.Acting] call _mission.GetActualSide) == west) then
			{
				if (!isNull _mission.GainedTokenActing) then
				{
					if (_mission.GainedTokenActing in _mLostTokensWest) then {
						_mLostTokensWest = _mLostTokensWest - [_mission.GainedTokenActing];
					};
					
					_mGainedTokensWest pushBack _mission.GainedTokenActing;
				};
				if (!isNull _mission.LostTokenActing) then
				{
					if (_mission.LostTokenActing in _mGainedTokensWest) then {
						_mGainedTokensWest = _mGainedTokensWest - [_mission.LostTokenActing];
					};
					
					_mLostTokensWest pushBack _mission.LostTokenActing;
				};
				if (!isNull _mission.GainedTokenOpposing) then
				{
					if (_mission.GainedTokenOpposing in _mLostTokensEast) then {
						_mLostTokensEast = _mLostTokensEast - [_mission.GainedTokenOpposing];
					};
					
					_mGainedTokensEast pushBack _mission.GainedTokenOpposing;
				};
				if (!isNull _mission.LostTokenOpposing) then
				{
					if (_mission.LostTokenOpposing in _mGainedTokensEast) then {
						_mGainedTokensEast = _mGainedTokensEast - [_mission.LostTokenOpposing];
					};
					
					_mLostTokensEast pushBack _mission.LostTokenOpposing;
				};
			}
			else {
				if (!isNull _mission.GainedTokenActing) then
				{
					if (_mission.GainedTokenActing in _mLostTokensEast) then {
						_mLostTokensEast = _mLostTokensEast - [_mission.GainedTokenActing];
					};
					
					_mGainedTokensEast pushBack _mission.GainedTokenActing;
				};
				if (!isNull _mission.LostTokenActing) then
				{
					if (_mission.LostTokenActing in _mGainedTokensEast) then {
						_mGainedTokensEast = _mGainedTokensEast - [_mission.LostTokenActing];
					};
					
					_mLostTokensEast pushBack _mission.LostTokenActing;
				};
				if (!isNull _mission.GainedTokenOpposing) then
				{
					if (_mission.GainedTokenOpposing in _mLostTokensWest) then {
						_mLostTokensWest = _mLostTokensWest - [_mission.GainedTokenOpposing];
					};
					
					_mGainedTokensWest pushBack _mission.GainedTokenOpposing;
				};
				if (!isNull _mission.LostTokenOpposing) then
				{
					if (_mission.LostTokenOpposing in _mGainedTokensWest) then {
						_mGainedTokensWest = _mGainedTokensWest - [_mission.LostTokenOpposing];
					};
					
					_mLostTokensWest pushBack _mission.LostTokenOpposing;
				};
			};
		};
		
		private method PrepareMission("_mission" as Mission)
		{
			private _westGroup = grpNull;
			private _eastGroup = grpNull;
			
			{
				if (side group _x == west) then {
					_westGroup = group _x;
				};
				if (side group _x == east) then {
					_eastGroup = group _x;
				};
			} foreach (call _mMissionUnitsHandler.GetSwitchableUnits);
		
			if (([MissionSide.Acting] call _mission.GetActualSide) == west) then {
				[_mBaseMarkersConfig, _mServerActionHandler, _westGroup, _eastGroup, _mGainedTokensWest, _mLostTokensWest, _mGainedTokensEast, _mLostTokensEast] call _mission.Prepare;
			}
			else {
				[_mBaseMarkersConfig, _mServerActionHandler, _westGroup, _eastGroup, _mGainedTokensEast, _mLostTokensEast, _mGainedTokensWest, _mLostTokensWest] call _mission.Prepare;
			};
		};
		
		protected override method Run()
		{
			private ["_missionResultWest" as MissionResultInfo, "_missionResultEast" as MissionResultInfo];
			
			_mGainedTokensWest = [];
			_mLostTokensWest = [];
			_mGainedTokensEast = [];
			_mLostTokensEast = [];
			private _accumulatedScoreWest = 0;
			private _accumulatedScoreEast = 0;
			
			sleep 3;
			
			// Run each mission
			
			_mCurrentMission = [""] call _mCampaign.GetNextMission;
			
			while {!isNull _mCurrentMission} do
			{
				_mEastHasInserted = false;
				_mWestHasInserted = false;
				_mEastlyUnits = [];
				_mWestlyUnits = [];
				_mWestPrimaryObjectiveCompleted = false;
				_mWestSecondaryObjectiveCompleted = false;
				_mWestReturnObjectiveCompleted = false;
				_mEastPrimaryObjectiveCompleted = false;
				_mEastSecondaryObjectiveCompleted = false;
				_mEastReturnObjectiveCompleted = false;
				
				private _remainingTime = _mCurrentMission.RemainingTime;
				
				// Override the mission's own remaining time with 30 minutes if it is too long
				if (_remainingTime > 30) then {
					_mCurrentMission.RemainingTime = 30;
					_remainingTime = 30;
				};
				
				[_mCurrentMission] call _self.NotifyClientsAboutMissionStart;
				
				sleep 1;
				
				// Create AI units
				private _westlyGroup = [west] call _mMissionUnitsHandler.GetGroupBySide;
				private _westlyAi = [west] call _mMissionUnitsHandler.GetAiUnitsBySide;
				private _westRespawnPos = getMarkerPos ([west, BaseMarker.Respawn] call _mBaseMarkersConfig.GetMarkerName);
				
				for "_i" from (count _westlyAi) to _mAiUnitsWestCount - 1 do {
					private _aiUnit = _westlyGroup createUnit ["B_Soldier_F", _westRespawnPos, [], 0, "NONE"];
					[_aiUnit] call _mMissionUnitsHandler.AddAiUnit;
				};
				
				private _eastlyGroup = [east] call _mMissionUnitsHandler.GetGroupBySide;
				private _eastlyAi = [east] call _mMissionUnitsHandler.GetAiUnitsBySide;
				private _eastRespawnPos = getMarkerPos ([east, BaseMarker.Respawn] call _mBaseMarkersConfig.GetMarkerName);
				
				for "_i" from (count _eastlyAi) to _mAiUnitsEastCount - 1 do {
					private _aiUnit = _eastlyGroup createUnit ["O_Soldier_F", _eastRespawnPos, [], 0, "NONE"];
					[_aiUnit] call _mMissionUnitsHandler.AddAiUnit;
				};
				
				[_mCurrentMission] call _self.PrepareMission;
				[_mCurrentMission] call _self.NotifyAboutMissionBriefing;
				
				[_mMissionMarkersInfo] call _self.InsertSideWithNoPlayers;
				
				private _startTime = time;
				private _endTime = time + _remainingTime * 60;
				
				call _mCurrentMission.RunAsync;
				
				while { _mCurrentMission.IsRunning } do
				{
					// Calculate remaining time
					_remainingTime = floor (1 + (_endTime - time) / 60);
					
					if (_remainingTime != _mCurrentMission.RemainingTime) then
					{
						_mCurrentMission.RemainingTime = _remainingTime;
						["ClientEventReciever.OnMissionTimeTick", [_remainingTime]] call Remote.Invoke;
					};

					// If time is up, cancel the mission.
					
					if (time > _endTime) then {
						_mCurrentMission.RemainingTime = 0;
						call _mCurrentMission.Cancel;
					};
					
					// If all players are dead, cancel the mission.
					
					if (call _self.AllUnitsAreDead) then
					{
						call _mCurrentMission.Cancel;
					};
					
					sleep 1;
					
					[_mCurrentMission] call _self.CheckAndNotifyObjectives;
				};
				
				// Take care of eventual gained and lost tokens
				[_mCurrentMission] call _self.SaveHistoryTokens;
				
				// Tell players that mission has ended and beam them back to base.
				_missionResultWest = [west] call _mCurrentMission.GetMissionResult;
				_missionResultEast = [east] call _mCurrentMission.GetMissionResult;
				
				[false] call PublicVariableHandler.BroadcastWestHasInserted;
				[false] call PublicVariableHandler.BroadcastEastHasInserted;
				[[]] call PublicVariableHandler.BroadcastInsertedWestlyUnits;
				[[]] call PublicVariableHandler.BroadcastInsertedEastlyUnits;
				
				sleep 1;
				
				_accumulatedScoreWest = _accumulatedScoreWest + _missionResultWest.Score;
				_accumulatedScoreEast = _accumulatedScoreEast + _missionResultEast.Score;
				
				["ClientEventReciever.OnMissionEnded", [[_mCurrentMission.Name, _missionResultWest, _missionResultEast] new MissionResult, _accumulatedScoreWest, _accumulatedScoreEast]] call Remote.Invoke;
				
				sleep 4;
				
				call _mCurrentMission.Cleanup;
				_mCurrentMission = [""] call _mCampaign.GetNextMission;
			};

			["ClientEventReciever.OnCampaignEnded", [_accumulatedScoreWest, _accumulatedScoreEast]] call Remote.Invoke;
			
			call _base.Run;
		};
	};
};
