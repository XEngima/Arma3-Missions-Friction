/*
 * Name:	Campaign
 * Date:	2020-06-24
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A Friction Campaign.
 */

using Sqx.Services;
using Mission.Communication;
using Mission.Common;

namespace Mission.Server
{
	public class Campaign : Service
	{
		private fields ["_mMissions" as Array /* of Mission */];
		private fields ["_mCurrentMission" as Mission, "_mEastHasInserted" as Boolean, "_mWestHasInserted" as Boolean];
	
		// Creates a Campaign object.
		public constructor()
		{
			call _base.Constructor;
			
			{
				_x setMarkerAlpha 0;
			} foreach allMapMarkers as String;
			
			_mMissions = [
				[east] new AirStationAssault
			];
		};
		
		private method NotifyAboutMissionStart("_mission" as Mission)
		{
			private ["_startMarkers" as Array /* of MarkerInfo */, "_markers" as Array /* of MarkerInfo */, "_missionMarkersInfo" as MissionMarkersInfo];
			
			_startMarkers = [];
			_markers = [];
			
			{
				_startMarkers pushBack [_x, west] new MarkerInfo;
			} foreach [west] call _mission.GetStartMarkers as String;
			
			{
				_startMarkers pushBack [_x, east] new MarkerInfo;
			} foreach [east] call _mission.GetStartMarkers as String;
			
			{
				_markers pushBack [_x, west] new MarkerInfo;
			} foreach [west] call _mission.GetMarkers as String;
			
			{
				_markers pushBack [_x, east] new MarkerInfo;
			} foreach [east] call _mission.GetMarkers as String;
			
			_missionMarkersInfo = [_startMarkers, _markers] new MissionMarkersInfo;
		
			[_missionMarkersInfo] call PublicVariableHandler.BroadcastMissionMarkersInfo;
			[CampaignPhase.MissionPlanning] call PublicVariableHandler.BroadcastCampaignPhase;
			["ClientEventReciever.OnMissionSetup", [_missionMarkersInfo]] call Remote.Invoke;
		};
		
		public method InsertGroup("_group" as Group, "_position" as Array)
		{
			if (side _group == west) then {
				if (!_mWestHasInserted) then {
					[side _group, _position] call _mCurrentMission.InsertGroup;
					_mWestHasInserted = true;
				};
			}
			else {
				if (!_mEastHasInserted) then {
					[side _group, _position] call _mCurrentMission.InsertGroup;
					_mEastHasInserted = true;
				};
			};
		};
		
		protected override method Run()
		{
			// Run each mission
			
			{
				_mCurrentMission = _x;
				_mEastHasInserted = false;
				_mWestHasInserted = false;
				
				[_mCurrentMission] call _self.NotifyAboutMissionStart;
				
				call _mCurrentMission.Setup;
				
				call _mCurrentMission.RunAsync;
				
				while { _mCurrentMission.IsRunning } do
				{
					
				};
				
				waitUntil { false };
				
				call _mCurrentMission.Cleanup;
			} foreach _mMissions as Mission;
			
			call _base.Run;
		};
	};
};
