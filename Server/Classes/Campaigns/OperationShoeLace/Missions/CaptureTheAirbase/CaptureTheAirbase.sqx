/*
 * Name:	CaptureTheAirbase
 * Date:	2020-08-13
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A mission in which the acting and opposing side will try to capture the airbase.
 */

using Mission.Common;
using Mission.Server;

namespace Mission.Server.OperationShoeLace
{
	public class CaptureTheAirbase : Mission
	{
		private fields ["_mChopper1" as Object, "_mChopper1State" as ChopperState, "_mHelipad1" as Object, "_mChopper1LiftOffTime" as Scalar];
		private fields ["_mChopper2" as Object, "_mChopper2State" as ChopperState, "_mHelipad2" as Object, "_mChopper2LiftOffTime" as Scalar];
		private fields ["_mChopper3" as Object, "_mChopper3State" as ChopperState, "_mHelipad3" as Object];
		private fields ["_mArmoredTransport1" as Object, "_mArmoredTransportState" as ChopperState];
		private fields ["_mActingGroup1" as Group, "_mActingGroup2" as Group];
		
		// Creates a CaptureTheAirbase object.
		public constructor()
		{
			call _base.Constructor;
			_mChopper1LiftOffTime = 0;
		};
		
		protected override method InitMission("_mission" as MissionSettings)
		{
			_mission.Name = "Capture The Airbase";
			_mission.StartTimeOfDay = 6;
			_mission.StartMarkersActing = ["m11a_StartMarker"];
			_mission.StartMarkersOpposing = ["m11o_StartMarker"];
		};
		
		protected override method Setup()
		{
			// Acting
			
			// Helicopters
			
			_mChopper1 = ["TRANSPORT HELICOPTER", MissionSide.Acting, "m11a_Helicopter1", false, true] call _self.CreateSideVehicleOnMarker;
			_mChopper1 engineOn true;
			_mChopper1 lock true;
			_mChopper1State = ChopperState.Waiting;
			
			_mChopper2 = ["TRANSPORT HELICOPTER", MissionSide.Acting, "m11a_Helicopter2", false, true] call _self.CreateSideVehicleOnMarker;
			_mChopper2 engineOn true;
			_mChopper2 lock true;
			_mChopper2State = ChopperState.Waiting;
			
			_mChopper3 = ["TRANSPORT HELICOPTER", MissionSide.Acting, "m11a_Helicopter3", false, true] call _self.CreateSideVehicleOnMarker;
			_mChopper3 engineOn true;
			_mChopper3State = ChopperState.Waiting;
			
			// Soldiers
			
			private _rifleman = ["RIFLEMAN", MissionSide.Acting, getMarkerPos "m11a_SoldierSpawnPoint"] call _self.CreateAiSoldierBySide;
			_mActingGroup1 = group _rifleman;
			["RIFLEMAN", MissionSide.Acting, getMarkerPos "m11a_SoldierSpawnPoint", _mActingGroup1] call _self.CreateAiSoldierBySide;
			["RIFLEMAN", MissionSide.Acting, getMarkerPos "m11a_SoldierSpawnPoint", _mActingGroup1] call _self.CreateAiSoldierBySide;
			
			{
				_x moveInCargo _mChopper1;
				_x assignAsCargo _mChopper1;
			} foreach units _mActingGroup1 as Object;
			
			_rifleman = ["RIFLEMAN", MissionSide.Acting, getMarkerPos "m11a_SoldierSpawnPoint"] call _self.CreateAiSoldierBySide;
			_mActingGroup2 = group _rifleman;
			["RIFLEMAN", MissionSide.Acting, getMarkerPos "m11a_SoldierSpawnPoint", _mActingGroup2] call _self.CreateAiSoldierBySide;
			["RIFLEMAN", MissionSide.Acting, getMarkerPos "m11a_SoldierSpawnPoint", _mActingGroup2] call _self.CreateAiSoldierBySide;
			
			{
				_x moveInCargo _mChopper2;
				_x assignAsCargo _mChopper2;
			} foreach units _mActingGroup2 as Object;
			
			// Opposing
			
			_mArmoredTransport1 = ["APC TRANSPORT CANNON", MissionSide.Opposing, "m11o_ArmoredTransport1", false, true] call _self.CreateSideVehicleOnMarker;
			_mArmoredTransportState = ChopperState.Waiting;
			
			_mHelipad1 = "Land_HelipadEmpty_F" createVehicle getMarkerPos "m11a_LandingZone1";
			_mHelipad2 = "Land_HelipadEmpty_F" createVehicle getMarkerPos "m11a_LandingZone2";
			_mHelipad3 = "Land_HelipadEmpty_F" createVehicle getMarkerPos "m11a_LandingZone3";
			
			// Independent
			
			private _pos = ["m_Airbase"] call Sqx.Markers.MarkerHelper.GetRandomPosInsideMarker;
			_rifleman = ["RIFLEMAN", MissionSide.Guerilla, _pos] call _self.CreateAiSoldierBySide;
			["RIFLEMAN", MissionSide.Guerilla, _pos, group _rifleman] call _self.CreateAiSoldierBySide;
			[group _rifleman, "m_Airbase"] execVM "Engima\SearchPatrol\SearchPatrol.sqf";
		
			_pos = ["m_Airbase"] call Sqx.Markers.MarkerHelper.GetRandomPosInsideMarker;
			_rifleman = ["RIFLEMAN", MissionSide.Guerilla, _pos] call _self.CreateAiSoldierBySide;
			["RIFLEMAN", MissionSide.Guerilla, _pos, group _rifleman] call _self.CreateAiSoldierBySide;
		
			_pos = ["m_Airbase"] call Sqx.Markers.MarkerHelper.GetRandomPosInsideMarker;
			_rifleman = ["RIFLEMAN", MissionSide.Guerilla, _pos] call _self.CreateAiSoldierBySide;
			["RIFLEMAN", MissionSide.Guerilla, _pos, group _rifleman] call _self.CreateAiSoldierBySide;
		
			_pos = ["m_Airbase"] call Sqx.Markers.MarkerHelper.GetRandomPosInsideMarker;
			_rifleman = ["RIFLEMAN", MissionSide.Guerilla, _pos] call _self.CreateAiSoldierBySide;
			["RIFLEMAN", MissionSide.Guerilla, _pos, group _rifleman] call _self.CreateAiSoldierBySide;
		
			_pos = ["m_Airbase"] call Sqx.Markers.MarkerHelper.GetRandomPosInsideMarker;
			_rifleman = ["RIFLEMAN", MissionSide.Guerilla, _pos] call _self.CreateAiSoldierBySide;
			["RIFLEMAN", MissionSide.Guerilla, _pos, group _rifleman] call _self.CreateAiSoldierBySide;
		
			_pos = ["m_Airbase"] call Sqx.Markers.MarkerHelper.GetRandomPosInsideMarker;
			_rifleman = ["RIFLEMAN", MissionSide.Guerilla, _pos] call _self.CreateAiSoldierBySide;
			["RIFLEMAN", MissionSide.Guerilla, _pos, group _rifleman] call _self.CreateAiSoldierBySide;
		
			_pos = ["m_Airbase"] call Sqx.Markers.MarkerHelper.GetRandomPosInsideMarker;
			_rifleman = ["RIFLEMAN", MissionSide.Guerilla, _pos] call _self.CreateAiSoldierBySide;
			["RIFLEMAN", MissionSide.Guerilla, _pos, group _rifleman] call _self.CreateAiSoldierBySide;
		
			_pos = ["m_Airbase"] call Sqx.Markers.MarkerHelper.GetRandomPosInsideMarker;
			_rifleman = ["RIFLEMAN", MissionSide.Guerilla, _pos] call _self.CreateAiSoldierBySide;
			["RIFLEMAN", MissionSide.Guerilla, _pos, group _rifleman] call _self.CreateAiSoldierBySide;
		
			call _base.Setup;
		};
		
		protected override method String AddBriefingInfoForActing()
		{
			return "Capture the airbase.";
		};
		
		protected override method String AddBriefingInfoForOpposing()
		{
			return "Capture the airbase.";
		};
		
		protected override method MissionObjective CreatePrimaryObjectiveForActing()
		{
			return ["Capture the airbase."] new MissionObjective;
		};
		
		protected override method MissionObjective CreatePrimaryObjectiveForOpposing()
		{
			return ["Capture the airbase."] new MissionObjective;
		};
		
		protected override method ObjectiveState CheckPrimaryObjectiveStateActing()
		{
			return ObjectiveState.None;
		};
		
		protected override method ObjectiveState CheckPrimaryObjectiveStateOpposing()
		{
			return ObjectiveState.None;
		};
		
		protected override method OnActingGroupInserted("_e" as InsertionEventArgs)
		{
			[MissionSide.Acting, "Enter the helicopter"] call _self.ShowNotification;
			[_e] call _base.OnActingGroupInserted;
		};
		
		protected override method OnOpposingGroupInserted("_e" as InsertionEventArgs)
		{
			[MissionSide.Opposing, "Enter the armored transport"] call _self.ShowNotification;
			[_e] call _base.OnOpposingGroupInserted;
		};
		
		protected override method OnEachIteration()
		{
			// Acting

			// Chopper 1
			
			if (_mChopper1State == ChopperState.Waiting) then
			{
				private _allPlayersInChopper = { alive _x && vehicle _x == _mChopper3 } count _self.ActingUnits == call _self.CountUnitsAliveActing;

				if (_allPlayersInChopper) then {
					private _waypoint = (group driver _mChopper1) addWaypoint [getMarkerPos "m11a_FirstChopperWaypoint", 0];
					_waypoint setWaypointBehaviour "CARELESS";
					_waypoint = (group driver _mChopper1) addWaypoint [getMarkerPos "m11a_LandingZone1", 0];
					_mChopper1LiftOffTime = time;
					_mChopper1State = ChopperState.Transporting;
				};
			};

			if (_mChopper1State == ChopperState.Transporting) then {
				if (_mChopper1 distance2D getMarkerPos "m11a_LandingZone1" < 150 && unitReady _mChopper1) then {
					_mChopper1 land "LAND";
					_mChopper1State = ChopperState.Landing;
				};
			};
			
			if (_mChopper1State == ChopperState.Landing) then {
				if ((getPosATL _mChopper1) select 2 < 1) then {
					_mActingGroup1 leaveVehicle _mChopper1;
					{ _mActingGroup1 reveal [_x, 4]; } foreach allUnits;
					[_mActingGroup1, "m_Airbase"] execVM "Engima\SearchPatrol\SearchPatrol.sqf";
					(group driver _mChopper1) addWaypoint [getMarkerPos "m11a_Helicopter1", 0];
					_mChopper1State = ChopperState.Returning;
				};
			};

			// Chopper 2
			
			if (_mChopper2State == ChopperState.Waiting && _mChopper1State == ChopperState.Transporting && time > _mChopper1LiftOffTime + 5) then
			{
				private _waypoint = (group driver _mChopper2) addWaypoint [getMarkerPos "m11a_FirstChopperWaypoint", 0];
				_waypoint setWaypointBehaviour "CARELESS";
				_waypoint = (group driver _mChopper2) addWaypoint [getMarkerPos "m11a_LandingZone2", 0];
				_mChopper2LiftOffTime = time;
				_mChopper2State = ChopperState.Transporting;
			};

			if (_mChopper2State == ChopperState.Transporting) then {
				if (_mChopper2 distance2D getMarkerPos "m11a_LandingZone2" < 150 && unitReady _mChopper2) then {
					_mChopper2 land "LAND";
					_mChopper2State = ChopperState.Landing;
				};
			};
			
			if (_mChopper2State == ChopperState.Landing) then {
				if ((getPosATL _mChopper1) select 2 < 1) then {
					_mActingGroup2 leaveVehicle _mChopper2;
					{ _mActingGroup1 reveal [_x, 4]; } foreach allUnits;
					[_mActingGroup2, "m_Airbase"] execVM "Engima\SearchPatrol\SearchPatrol.sqf";
					(group driver _mChopper2) addWaypoint [getMarkerPos "m11a_Helicopter2", 0];
					_mChopper2State = ChopperState.Returning;
				};
			};

			// Chopper 3 (players' chopper)
			
			if (_mChopper3State == ChopperState.Waiting && _mChopper2State == ChopperState.Transporting && time > _mChopper2LiftOffTime + 5) then
			{
				private _allPlayersInChopper = { alive _x && vehicle _x == _mChopper3 } count _self.ActingUnits == call _self.CountUnitsAliveActing;

				if (_allPlayersInChopper) then {
					private _waypoint = (group driver _mChopper3) addWaypoint [getMarkerPos "m11a_FirstChopperWaypoint", 0];
					_waypoint setWaypointBehaviour "CARELESS";
					_waypoint = (group driver _mChopper3) addWaypoint [getMarkerPos "m11a_LandingZone3", 0];
					_mChopper3State = ChopperState.Transporting;
					player sideChat "ACTING TRANSPORTING";
				};
			};

			if (_mChopper3State == ChopperState.Transporting) then {
				if (_mChopper3 distance2D getMarkerPos "m11a_LandingZone3" < 150 && unitReady _mChopper3) then {
					_mChopper3 land "LAND";
					_mChopper3State = ChopperState.Landing;
					player sideChat "ACTING LANDING";
				};
			};
			
			if (_mChopper3State == ChopperState.Landing) then {
				private _allUnitsHasExited = { alive _x && vehicle _x == _mChopper3 } count _self.ActingUnits == 0;
			
				if (_allUnitsHasExited) then {
					(group driver _mChopper3) addWaypoint [getMarkerPos "m11a_Helicopter3", 0];
				};
			};

			// Opposing
			
			if (_mArmoredTransportState == ChopperState.Waiting) then {
				private _allPlayersIn = { alive _x && vehicle _x == _mArmoredTransport1 } count _self.OpposingUnits == call _self.CountUnitsAliveOpposing;

				if (_allPlayersIn) then {
					private _waypoint = (group driver _mArmoredTransport1) addWaypoint [getMarkerPos "m11o_UnloadMarker", 25];
					_waypoint setWaypointBehaviour "AWARE";
					_mArmoredTransportState = ChopperState.Transporting;
					player sideChat "OPPOSING TRANSPORTING";
				};
			};
			
			if (_mArmoredTransportState == ChopperState.Transporting) then {
				if (_mArmoredTransport1 distance2D getMarkerPos "m11o_UnloadMarker" < 25 && unitReady _mArmoredTransport1) then {
					_mArmoredTransportState = ChopperState.Landing;
					_mArmoredTransport1 limitSpeed 0;
					player sideChat "OPPOSING UNLOADING";
				};
			};
			
			if (_mArmoredTransportState == ChopperState.Landing) then {
				private _allPlayersOut = { alive _x && vehicle _x == _mArmoredTransport1 } count _self.OpposingUnits == 0;

				if (_allPlayersOut) then {
					private _waypoint = (group driver _mArmoredTransport1) addWaypoint [getMarkerPos "m11o_ArmorDestination", 25];
					_mArmoredTransport1 limitSpeed 10;
					_waypoint setWaypointBehaviour "COMBAT";
					_waypoint setWaypointType "SAD";
					_waypoint setWaypointCombatMode "RED";
					_mArmoredTransportState = ChopperState.Returning;
					player sideChat "OPPOSING ENGAGING";
				};
			};
		};
		
		public override method Cleanup()
		{
			call _base.Cleanup;
			deleteVehicle _mHelipad1;
			deleteVehicle _mHelipad2;
			deleteVehicle _mHelipad3;
		};
	};
};
