/*
 * Name:	CannonballRun
 * Date:	2020-08-11
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A mission in which one side chases the other with a helicopter.
 */

using Mission.Common;

namespace Mission.Server
{
	public class CannonballRun : Mission
	{
		private fields ["_mTruck" as Object];
	
		// Creates a CannonballRun object.
		public constructor()
		{
			call _base.Constructor;
		};
		
		protected override method InitMission("_mission" as MissionSettings)
		{
			_mission.Name = "Cannonball Run";
			_mission.StartTimeOfDay = floor random 24;
			_mission.StartMarkersActing = ["m10a_StartArea1"];
			_mission.StartMarkersOpposing = ["m10o_StartArea"];
		};
		
		protected override method Setup()
		{
			_mTruck = ["DEVICE TRUCK", MissionSide.Acting, "m10a_TruckStartMarker"] call _self.CreateSideVehicleOnMarker;
			["MRAP HMG", MissionSide.Acting, "m10a_EscortStartMarker"] call _self.CreateSideVehicleOnMarker;
			["HEAVY ATTACK HELICOPTER", MissionSide.Opposing, "m10a_Helicopter"] call _self.CreateSideVehicleOnMarker;
		
			call _base.Setup;
		};
		
		protected override method String AddBriefingInfoForActing()
		{
			return "You must immediately transport a hand written message to Alpha Charlie on the other side of the map. But beware of enemy helicopters.";
		};
		
		protected override method String AddBriefingInfoForOpposing()
		{
			return "The enemy has been seen hurrying over the map like mad dogs. Find them and take them out.";
		};
		
		protected override method MissionObjective CreatePrimaryObjectiveForActing()
		{
			return ["Drive to Alpha Charlie.", "Drive to Alpa Charlie at the Southern Lighthouse as fast as you can."] new MissionObjective;
		};
		
		protected override method MissionObjective CreatePrimaryObjectiveForOpposing()
		{
			return ["Kill the messenger.", "Take the helicopter, perform a search for the enemy vehicle and take it out."] new MissionObjective;
		};
		
		protected override method ObjectiveState CheckPrimaryObjectiveStateActing()
		{
			if (!canMove _mTruck) then {
				return ObjectiveState.Failed;
			};
			
			if (_mTruck distance getMarkerPos "m10_SouthernLighthouse" < 50) then {
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
		
		protected override method ObjectiveState CheckPrimaryObjectiveStateOpposing()
		{
			if (_mTruck distance getMarkerPos "m10_SouthernLighthouse" < 50) then {
				return ObjectiveState.Failed;
			};
			
			if (!canMove _mTruck) then {
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
	};
};
