/*
 * Name:	DragRacing
 * Date:	2020-07-27
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Test mission used during development of Friction.
 */

using Mission.Common;

namespace Mission.Server
{
	public class DragRacing : Mission
	{
		private fields ["_mGoalOwnerSide" as MissionSide];
		
		// Creates a DragRacing object.
		public constructor("_actingSide" as Side)
		{
			[_actingSide] call _base.Constructor;
			_mGoalOwnerSide = MissionSide.Guerilla;
		};
		
		protected override method InitMission("_mission" as MissionSettings)
		{
			_mission.Name = "Drag Racing";
			_mission.MaximumMissionTime = 5;
			_mission.StartTimeOfDay = 12;
			_mission.StartMarkersActing = ["m08a_StartArea"];
			_mission.StartMarkersOpposing = ["m08o_StartArea"];
			_mission.SideMarkersActing = ["m08_GoalLineMarker"];
			_mission.SideMarkersOpposing = ["m08_GoalLineMarker"];
		};
		
		protected override method MissionObjective CreatePrimaryObjectiveForActing()
		{
			return ["Get to the goal first."] new MissionObjective;
		};
		
		protected override method MissionObjective CreatePrimaryObjectiveForOpposing()
		{
			return ["Get to the goal first."] new MissionObjective;
		};
		
		protected override method ObjectiveState CheckPrimaryObjectiveStateActing()
		{
			if (_mGoalOwnerSide == MissionSide.Opposing) then {
				return ObjectiveState.Failed;
			};
			
			if ({ _x distance getMarkerPos "m08_GoalLineMarker" < 30 } count _self.ActingUnits > 0) then {
				_mGoalOwnerSide = MissionSide.Acting;
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
		
		protected override method ObjectiveState CheckPrimaryObjectiveStateOpposing()
		{
			if (_mGoalOwnerSide == MissionSide.Acting) then {
				return ObjectiveState.Failed;
			};
			
			if ({ _x distance getMarkerPos "m08_GoalLineMarker" < 30 } count _self.OpposingUnits > 0) then {
				_mGoalOwnerSide = MissionSide.Opposing;
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
	};
};
