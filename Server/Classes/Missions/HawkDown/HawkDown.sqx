/*
 * Name:	EasyKill
 * Date:	2020-07-01
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A very simple test mission.
 */

using Mission.Common;
using Sqx.Markers;

namespace Mission.Server
{
	public class HawkDown : Mission
	{
		private fields ["_mGreyHawk" as Object, "_mGreyHawkMarker" as String];
		
		// Creates a AirBaseMadness object.
		public constructor("_baseMarkersConfig" as IBaseMarkersConfig, "_actingSide" as Side)
		{
			[_baseMarkersConfig, _actingSide] call _base.Constructor;
			_mGreyHawkMarker = "";
		};
		
		protected override method InitMission("_mission" as Mission.Server.MissionSettings)
		{
			_mission.Name = "Hawk Down";
			_mission.StartMarkersActing = ["m05a_StartArea"];
			_mission.StartMarkersOpposing = ["m05o_StartArea"];
			_mission.SideMarkersActing = ["m05_CrashSite"];
			_mission.SideMarkersOpposing = ["m05_CrashSite"];
			_mission.AddReturnObjectiveForActing = true;
			_mission.AddReturnObjectiveForOpposing = true;
		};
		
		public override method Setup()
		{
			// Spawn acting side's objects
			private _ammoBox = ["AMMOBOX ORDNANCE", MissionSide.Acting, BaseMarker.AmmoCrate] call _self.CreateSideVehicleOnBaseMarker;
			
			_ammoBox addBackpackCargoGlobal ["B_Kitbag_cbr", 1];
			
			_mGreyHawkMarker = createMarkerLocal ["m05_Wreckage", ["m05_CrashSite"] call MarkerHelper.GetRandomPosInsideMarker];
			_mGreyHawkMarker setMarkerDirLocal random 360;
			
			_mGreyHawk = ["TRANSPORT HELICOPTER", MissionSide.Acting, _mGreyHawkMarker] call _self.CreateSideVehicleOnMarker;
			_mGreyHawk setDamage [0.8, false];
			
			if (HistoryToken.Fuel in _self.EarlierGainedTokensActing) then {
				["FUEL TRUCK", MissionSide.Acting, BaseMarker.AmmoCrate] call _self.CreateSideVehicleOnBaseMarker;
			};
			
			call _base.Setup;
		};
		
		protected override method MissionObjective CreatePrimaryObjectiveForActing()
		{
			private _shortDescription = "Destroy helicopter";
			private _longDescription = "Find and destroy the helicopter before it falls into enemy hands.";
			
			return [_shortDescription, _longDescription] new MissionObjective;
		};
		
		protected override method MissionObjective CreatePrimaryObjectiveForOpposing()
		{
			private _shortDescription = "Steal intel from wreckage";
			private _longDescription = "Find the downed enemy helicopter before the enemy finds it and steal some intel.";
			
			return [_shortDescription, _longDescription] new MissionObjective;
		};
		
		protected override method Boolean PrimaryObjectiveFulfilledForActing()
		{
			return !alive _mGreyHawk;
		};
		
		protected override method Boolean PrimaryObjectiveFulfilledForOpposing()
		{
			private _greyHawkAlive = alive _mGreyHawk;
			private _oneUnitNearHawk = { _x distance _mGreyHawk < 5 } count _self.OpposingUnits > 0;
			
			private _fulfilled = _greyHawkAlive && _oneUnitNearHawk;
			
			if (_fulfilled) then {
				_self.GainedTokenOpposing = HistoryToken.HawkIntel;
			};
			
			return _fulfilled;
		};
	};
};
