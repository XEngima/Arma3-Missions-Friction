/*
 * Name:	AirStationAssault
 * Date:	2020-06-24
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A mission where players assault and defend Air Station Mike.
 */

using Mission.Common;

namespace Mission.Server
{
	public class AirStationAssault : Mission
	{
		private fields ["_mAmmoTruck" as Object];
		
		// Creates a AirStationAssault object.
		public constructor("_baseMarkersConfig" as IBaseMarkersConfig, "_actingSide" as Side)
		{
			[_baseMarkersConfig, _actingSide] call _base.Constructor;
		};
		
		protected override method Initialize()
		{
			// The "acting" side will be the side attacking.
			// The "opposing" side will be the side defending.
			
			_self.Name = "Air Station Assault";
			_self.StartTimeOfDay = 5;
			_self.ActingSideStartMarkers = ["m01a_startarea1", "m01a_startarea2", "m01a_startarea3"];
			_self.OpposingSideStartMarkers = ["m01o_startarea1"];
			_self.ActingSideMarkers = ["m01a_PrimaryTarget"];
		};
		
		public override method Setup()
		{
			// Spawn acting side's objects
			private _ammoBox = ["AMMOBOX ORDNANCE", MissionSide.Acting, BaseMarker.AmmoCrate] call _self.CreateSideVehicleOnBaseMarker;
			
			_ammoBox addBackpackCargoGlobal ["B_Kitbag_cbr", 1];
			
			// Spawn opposing side's objects
			["AMMO TRUCK", MissionSide.Opposing, "m01o_AmmoTruck"] call _self.CreateSideVehicleOnMarker;
			
			call _base.Setup;
		};

		protected override method MissionObjective CreatePrimaryObjectiveForActing()
		{
			private _shortDescription = "Destroy the ammo truck.";
			private _longDescription = "Destroy ammo truck. The enemy ammo truck is located somewhere inside the area of Air Station Mike-26.";
			
			return [_shortDescription, _longDescription] new MissionObjective;
		};

		protected override method MissionObjective CreatePrimaryObjectiveForOpposing()
		{
			private _shortDescription = "Patrol Air Station Mike-26.";
			private _longDescription = "Patrol the Air Station Mike-26 and keep it safe from enemies.";
			
			return [_shortDescription, _longDescription] new MissionObjective;
		};
		
		protected override method Boolean PrimaryObjectiveCompletedForActing()
		{
			return _self.RemainingTime == 0 && alive _mAmmoTruck;
		};
		
		protected override method Boolean PrimaryObjectiveCompletedForOpposing()
		{
			return !alive _mAmmoTruck;
		};
	};
};
