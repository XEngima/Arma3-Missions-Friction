/*
 * Name:	Survive
 * Date:	2020-09-24
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Test mission.
 */

using Campaigns;
using Tvtcf.Server;
using Tvtcf.Common;

namespace Campaigns.MyCampaign
{
	public class Survive : Mission
	{
		private fields ["_mSecondarySucceeded" as Boolean];
		
		// Creates a Intro object.
		public constructor()
		{
			call _base.Constructor;
		};
		
		protected override method InitMission("_mission" as MissionSettings)
		{
			_mission.Name = "Survive";
			_mission.StartMarkersActing = ["m06o_StartArea1"];
			_mission.StartMarkersOpposing = ["m06o_StartArea1"];
			_mission.StartTimeOfDay = 12;
			_mission.AddReturnObjectiveForActing = true;
			_mission.AddReturnObjectiveForOpposing = true;
		};
		
		protected override method Setup()
		{
			var _mrap = ["MRAP HMG", BaseMarker.LandVehicles, MissionSide.Acting, true] call _self.CreateSideVehicleInBase;
			
			["ASSAULT BOAT", BaseMarker.Naval, MissionSide.Acting] call _self.CreateSideVehicleInBase;
			["AMMOBOX SPECIAL WEAPONS", BaseMarker.AmmoCrate, MissionSide.Acting] call _self.CreateSideVehicleInBase;
			
			[_mrap, "Select this MRAP", MissionSide.Acting] call _self.AddAction;
			
			call _base.Setup;
		};
		
		public override method OnAction("_actionId" as Scalar, "_target" as Object, "_actor" as Object)
		{
			_mSecondarySucceeded = true;
		};
		
		protected override method MissionObjective CreatePrimaryObjectiveForActing()
		{
			return ["Survive one minute."] new MissionObjective;
		};
		
		protected override method MissionObjective CreateSecondaryObjectiveForActing()
		{
			return ["Select MRAP."] new MissionObjective;
		};
		
		protected override method MissionObjective CreatePrimaryObjectiveForOpposing()
		{
			return ["Survive one minute."] new MissionObjective;
		};
		
		protected override method ObjectiveState CheckPrimaryObjectiveStateActing()
		{
			if (_self.RemainingTime <= 29) then {
				return ObjectiveState.Succeeded;
			};

			return ObjectiveState.None;
		};
		
		protected override method ObjectiveState CheckSecondaryObjectiveStateActing()
		{
			if (_mSecondarySucceeded) then {
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
		
		protected override method ObjectiveState CheckPrimaryObjectiveStateOpposing()
		{
			if (_self.RemainingTime <= 29) then {
				return ObjectiveState.Succeeded;
			};

			return ObjectiveState.None;
		};
	};
};
