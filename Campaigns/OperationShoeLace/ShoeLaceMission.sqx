/*
 * Name:	ShoeLaceMission
 * Date:	2020-08-03
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Contains common logic for all mission that belong to Operation Shoe Lace.
 */

using Tvtcf.Common;
using Tvtcf.Server;
using Campaigns;

namespace Campaigns.ShoeLace
{
	public class ShoeLaceMission : Mission
	{
		// Creates a ShoeLaceMission object.
		public constructor()
		{
			call _base.Constructor;
		};
		
		protected override method InitMission("_mission" as MissionSettings)
		{
			_mission.Name = "A Shoe Lace Mission";
		};
		
		protected property Object ActingsQuadbike { get; private set; };
		
		protected property Object OpposingsQuadbike { get; private set; };
		
		protected property Object ActingsMrap { get; private set; };
		
		protected property Object OpposingsMrap { get; private set; };
		
		protected override method String AddBriefingInfoForActing()
		{
			return [MissionSide.Acting] call _self.GetTokenBriefingText;
		};
		
		protected override method String AddBriefingInfoForOpposing()
		{
			return [MissionSide.Opposing] call _self.GetTokenBriefingText;
		};
		
		protected method GetTokenBriefingText("_missionSide" as MissionSide)
		{
			var _info = "<br /><br />Gained tokens: ";
			var _comma = "";
			
			if (_missionSide == MissionSide.Acting) then {
				{
					_info = _info + _comma + _x;
					_comma = ", ";
				} foreach _self.EarlierGainedTokensActing as String;
			}
			else {
				{
					_info = _info + _comma + _x;
					_comma = ", ";
				} foreach _self.EarlierGainedTokensOpposing as String;
			};
			
			_info = _info + ".<br />Lost tokens: ";
			
			_comma = "";
			
			if (_missionSide == MissionSide.Acting) then {
				{
					_info = _info + _comma + _x;
					_comma = ", ";
				} foreach _self.EarlierLostTokensActing as String;
			}
			else {
				{
					_info = _info + _comma + _x;
					_comma = ", ";
				} foreach _self.EarlierLostTokensOpposing as String;
			};
			
			return _info;
		};
		
		protected override method Setup()
		{
			[MissionSide.Acting, false] call _self.SetIndependentAlliance;
			[MissionSide.Opposing, false] call _self.SetIndependentAlliance;
			
			if ("BASIC WEAPONS" in _self.EarlierGainedTokensActing) then {
				["AMMOBOX BASIC WEAPONS", MissionSide.Acting, BaseMarker.AmmoCrate, true] call _self.CreateSideVehicleOnBaseMarker;
				["AMMOBOX BASIC AMMO", MissionSide.Acting, BaseMarker.AmmoCrate, true] call _self.CreateSideVehicleOnBaseMarker;
			};
			
			if ("BASIC WEAPONS" in _self.EarlierGainedTokensOpposing) then {
				["AMMOBOX BASIC WEAPONS", MissionSide.Opposing, BaseMarker.AmmoCrate, true] call _self.CreateSideVehicleOnBaseMarker;
				["AMMOBOX BASIC AMMO", MissionSide.Opposing, BaseMarker.AmmoCrate, true] call _self.CreateSideVehicleOnBaseMarker;
			};
			
			if ("AAF EXPLOSIVES" in _self.EarlierGainedTokensActing) then {
				var _box = ["AMMOBOX ORDNANCE", MissionSide.Acting, BaseMarker.AmmoCrate, true] call _self.CreateSideVehicleOnBaseMarker;
				_box addBackpackCargoGlobal ["B_Kitbag_cbr", 1];
			};
		
			if ("AAF EXPLOSIVES" in _self.EarlierGainedTokensOpposing) then {
				var _box = ["AMMOBOX ORDNANCE", MissionSide.Opposing, BaseMarker.AmmoCrate, true] call _self.CreateSideVehicleOnBaseMarker;
				_box addBackpackCargoGlobal ["B_Kitbag_cbr", 1];
			};
		
			_self.ActingsQuadbike = ["QUADBIKE", MissionSide.Acting, BaseMarker.LandVehicles, true] call _self.CreateSideVehicleOnBaseMarker;
			_self.ActingsMrap = ["MRAP", MissionSide.Acting, BaseMarker.LandVehicles, true] call _self.CreateSideVehicleOnBaseMarker;
			_self.OpposingsQuadbike = ["QUADBIKE", MissionSide.Opposing, BaseMarker.LandVehicles, true] call _self.CreateSideVehicleOnBaseMarker;
			_self.OpposingsMrap = ["MRAP", MissionSide.Opposing, BaseMarker.LandVehicles, true] call _self.CreateSideVehicleOnBaseMarker;
			
			call _base.Setup;
		};
		
		protected method SetIndependentAlliance("_missionSide" as MissionSide, "_setAsAllied" as Boolean)
		{
			var _side = [_missionSide] call _self.GetActualSide;
			
			resistance setFriend [_side, 0];
			_side setFriend [resistance, 0];
		};
	};
};
