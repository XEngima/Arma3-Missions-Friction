/*
 * Name:	ShoeLaceMission
 * Date:	2020-08-03
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Contains common logic for all mission that belong to Operation Shoe Lace.
 */

using Tvtcf.Common;
using Tvtcf.Server;
using Campaigns;

namespace Campaigns.ShoeLace
{
	public class ShoeLaceMission : Mission
	{
		// Creates a ShoeLaceMission object.
		public constructor()
		{
			call _base.Constructor;
			
			_self.ActingQuadbike = objNull;
			_self.ActingMrap = objNull;
			_self.ActingBasicWeaponsBox = objNull;
			_self.ActingBasicAmmoBox = objNull;
			_self.ActingOrdnanceBox = objNull;
			
			_self.OpposingQuadbike = objNull;
			_self.OpposingMrap = objNull;
			_self.OpposingBasicWeaponsBox = objNull;
			_self.OpposingBasicAmmoBox = objNull;
			_self.OpposingOrdnanceBox = objNull;
		};
		
		protected override method InitMission("_mission" as MissionSettings)
		{
			_mission.Name = "A Shoe Lace Mission";
		};
		
		protected property Object ActingQuadbike { get; set; };
		
		protected property Object OpposingQuadbike { get; set; };
		
		protected property Object ActingMrap { get; set; };
		
		protected property Object OpposingMrap { get; set; };
		
		protected property Object ActingBasicWeaponsBox { get; set; };
		
		protected property Object ActingBasicAmmoBox { get; set; };
		
		protected property Object ActingOrdnanceBox { get; set; };
		
		protected property Object OpposingBasicWeaponsBox { get; set; };
		
		protected property Object OpposingBasicAmmoBox { get; set; };
		
		protected property Object OpposingOrdnanceBox { get; set; };
		
		protected override method String AddBriefingInfoForActing()
		{
			return [MissionSide.Acting] call _self.GetTokenBriefingText;
		};
		
		protected override method String AddBriefingInfoForOpposing()
		{
			return [MissionSide.Opposing] call _self.GetTokenBriefingText;
		};
		
		protected method GetTokenBriefingText("_missionSide" as MissionSide)
		{
			var _info = "<br /><br />Gained tokens: ";
			var _comma = "";
			
			if (_missionSide == MissionSide.Acting) then {
				{
					_info = _info + _comma + _x;
					_comma = ", ";
				} foreach _self.GainedTokensActing as String;
			}
			else {
				{
					_info = _info + _comma + _x;
					_comma = ", ";
				} foreach _self.GainedTokensOpposing as String;
			};
			
			_info = _info + ".<br />Lost tokens: ";
			
			_comma = "";
			
			if (_missionSide == MissionSide.Acting) then {
				{
					_info = _info + _comma + _x;
					_comma = ", ";
				} foreach _self.LostTokensActing as String;
			}
			else {
				{
					_info = _info + _comma + _x;
					_comma = ", ";
				} foreach _self.LostTokensOpposing as String;
			};
			
			return _info;
		};
		
		protected override method Setup()
		{
			[MissionSide.Acting, false] call _self.SetIndependentAlliance;
			[MissionSide.Opposing, false] call _self.SetIndependentAlliance;
			
			if ("BASIC WEAPONS" in _self.GainedTokensActing) then {
				_self.ActingBasicWeaponsBox = ["AMMOBOX BASIC WEAPONS", BaseMarker.AmmoCrate, MissionSide.Acting, true] call _self.CreateSideVehicleInBase;
				_self.ActingBasicAmmoBox = ["AMMOBOX BASIC AMMO", BaseMarker.AmmoCrate, MissionSide.Acting, true] call _self.CreateSideVehicleInBase;
			};
			
			if ("BASIC WEAPONS" in _self.GainedTokensOpposing) then {
				_self.OpposingBasicWeaponsBox = ["AMMOBOX BASIC WEAPONS", BaseMarker.AmmoCrate, MissionSide.Opposing, true] call _self.CreateSideVehicleInBase;
				_self.OpposingBasicAmmoBox = ["AMMOBOX BASIC AMMO", BaseMarker.AmmoCrate, MissionSide.Opposing, true] call _self.CreateSideVehicleInBase;
			};
			
			if ("AAF EXPLOSIVES" in _self.GainedTokensActing) then {
				_self.ActingOrdnanceBox = ["AMMOBOX ORDNANCE", BaseMarker.AmmoCrate, MissionSide.Acting, true] call _self.CreateSideVehicleInBase;
				_self.ActingOrdnanceBox addBackpackCargoGlobal ["B_Kitbag_cbr", 1];
			};
		
			if ("AAF EXPLOSIVES" in _self.GainedTokensOpposing) then {
				_self.OpposingOrdnanceBox = ["AMMOBOX ORDNANCE", BaseMarker.AmmoCrate, MissionSide.Opposing, true] call _self.CreateSideVehicleInBase;
				_self.OpposingOrdnanceBox addBackpackCargoGlobal ["B_Kitbag_cbr", 1];
			};
		
			_self.ActingQuadbike = ["QUADBIKE", BaseMarker.LandVehicles, MissionSide.Acting, true] call _self.CreateSideVehicleInBase;
			_self.ActingMrap = ["MRAP", BaseMarker.LandVehicles, MissionSide.Acting, true] call _self.CreateSideVehicleInBase;
			_self.OpposingQuadbike = ["QUADBIKE", BaseMarker.LandVehicles, MissionSide.Opposing, true] call _self.CreateSideVehicleInBase;
			_self.OpposingMrap = ["MRAP", BaseMarker.LandVehicles, MissionSide.Opposing, true] call _self.CreateSideVehicleInBase;
			
			call _base.Setup;
		};
		
		protected method SetIndependentAlliance("_missionSide" as MissionSide, "_setAsAllied" as Boolean)
		{
			var _side = [_missionSide] call _self.GetActualSide;
			var _value = 1;
			
			if (!_setAsAllied) then {
				_value = 0;
			};
			
			resistance setFriend [_side, _value];
			_side setFriend [resistance, _value];
		};
		
		protected method MakeEmptyAmmoBox("_ammoBox" as Object)
		{
			clearWeaponCargoGlobal _ammoBox;
			clearMagazineCargoGlobal _ammoBox;
			clearBackpackCargoGlobal _ammoBox;
			clearItemCargoGlobal _ammoBox;
		};
	};
};
