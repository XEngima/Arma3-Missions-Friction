/*
 * Name:	ShoeLaceMission
 * Date:	2020-08-03
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Contains common logic for all mission that belong to Operation Shoe Lace.
 */

using Tvtcf.Common;
using Tvtcf.Server;
using Campaigns;

namespace Campaigns.ShoeLace
{
	public class ShoeLaceMission : Mission
	{
		// Creates a ShoeLaceMission object.
		public constructor()
		{
			call _base.Constructor;
			
			_self.ActingQuadbike = objNull;
			_self.ActingMrap = objNull;
			_self.ActingBasicWeaponsBox = objNull;
			_self.ActingBasicAmmoBox = objNull;
			_self.ActingOrdnanceBox = objNull;
			
			_self.OpposingQuadbike = objNull;
			_self.OpposingMrap = objNull;
			_self.OpposingBasicWeaponsBox = objNull;
			_self.OpposingBasicAmmoBox = objNull;
			_self.OpposingOrdnanceBox = objNull;
		};
		
		protected override method InitMission("_mission" as MissionSettings)
		{
			_mission.Name = "A Shoe Lace Mission";
		};
		
		protected property Object ActingQuadbike { get; set; };
		
		protected property Object OpposingQuadbike { get; set; };
		
		protected property Object ActingMrap { get; set; };
		
		protected property Object OpposingMrap { get; set; };
		
		protected property Object ActingBasicWeaponsBox { get; set; };
		
		protected property Object ActingBasicAmmoBox { get; set; };
		
		protected property Object ActingOrdnanceBox { get; set; };
		
		protected property Object ActingSpecialWeaponsBox { get; set; };
		
		protected property Object ActingSupportBox { get; set; };
		
		protected property Object OpposingBasicWeaponsBox { get; set; };
		
		protected property Object OpposingBasicAmmoBox { get; set; };
		
		protected property Object OpposingOrdnanceBox { get; set; };
		
		protected property Object OpposingSpecialWeaponsBox { get; set; };
		
		protected property Object OpposingSupportBox { get; set; };
		
		protected override method String AddBriefingInfoForActing()
		{
			return [MissionSide.Acting] call _self.GetTokenBriefingText;
		};
		
		protected override method String AddBriefingInfoForOpposing()
		{
			return [MissionSide.Opposing] call _self.GetTokenBriefingText;
		};
		
		protected method GetTokenBriefingText("_missionSide" as MissionSide)
		{
			var _info = "<br /><br />Gained tokens: ";
			var _comma = "";
			
			if (_missionSide == MissionSide.Acting) then {
				{
					_info = _info + _comma + _x;
					_comma = ", ";
				} foreach _self.GainedTokensActing as String;
			}
			else {
				{
					_info = _info + _comma + _x;
					_comma = ", ";
				} foreach _self.GainedTokensOpposing as String;
			};
			
			if (_comma == "") then {
				_info = _info + "None";
			};
			
			_info = _info + "<br />Lost tokens: ";
			
			_comma = "";
			
			if (_missionSide == MissionSide.Acting) then {
				{
					_info = _info + _comma + _x;
					_comma = ", ";
				} foreach _self.LostTokensActing as String;
			}
			else {
				{
					_info = _info + _comma + _x;
					_comma = ", ";
				} foreach _self.LostTokensOpposing as String;
			};
			
			if (_comma == "") then {
				_info = _info + "None";
			};
			
			return _info;
		};
		
		protected method Object CreateExplosivesBoxInBase("_missionSide" as MissionSide)
		{
			var _box = ["AMMOBOX ORDNANCE", BaseMarker.AmmoCrate, _missionSide, true] call _self.CreateSideVehicleInBase;
			[_box] call _self.MakeEmptyAmmoBox;
			[_box, _missionSide] call _self.FillBoxWithExplosives;
			_box addBackpackCargoGlobal ["B_Kitbag_cbr", 1];
			
			return _box;
		};
		
		protected method Object CreateOpticsBoxInBase("_missionSide" as MissionSide)
		{
			var _box = ["AMMOBOX SPECIAL WEAPONS", BaseMarker.AmmoCrate, _missionSide, true] call _self.CreateSideVehicleInBase;
			[_box] call _self.MakeEmptyAmmoBox;
			[_box, _missionSide] call _self.FillBoxWithOptics;
			
			return _box;
		};
		
		protected method Object CreateSupplyBoxInBase("_missionSide" as MissionSide)
		{
			var _box = ["AMMOBOX SUPPORT", BaseMarker.AmmoCrate, _missionSide, true] call _self.CreateSideVehicleInBase;
			[_box] call _self.MakeEmptyAmmoBox;
			[_box, _missionSide] call _self.FillBoxWithSupplies;
			
			return _box;
		};
		
		protected override method Setup()
		{
			[MissionSide.Acting, false] call _self.SetIndependentAlliance;
			[MissionSide.Opposing, false] call _self.SetIndependentAlliance;
			
			if ("BASIC WEAPONS" in _self.GainedTokensActing) then {
				_self.ActingBasicWeaponsBox = ["AMMOBOX BASIC WEAPONS", BaseMarker.AmmoCrate, MissionSide.Acting, true] call _self.CreateSideVehicleInBase;
				_self.ActingBasicAmmoBox = ["AMMOBOX BASIC AMMO", BaseMarker.AmmoCrate, MissionSide.Acting, true] call _self.CreateSideVehicleInBase;
			};
			
			if ("BASIC WEAPONS" in _self.GainedTokensOpposing) then {
				_self.OpposingBasicWeaponsBox = ["AMMOBOX BASIC WEAPONS", BaseMarker.AmmoCrate, MissionSide.Opposing, true] call _self.CreateSideVehicleInBase;
				_self.OpposingBasicAmmoBox = ["AMMOBOX BASIC AMMO", BaseMarker.AmmoCrate, MissionSide.Opposing, true] call _self.CreateSideVehicleInBase;
			};
			
			if ("EXPLOSIVES" in _self.GainedTokensActing) then
			{
				_self.ActingOrdnanceBox = [MissionSide.Acting] call _self.CreateExplosivesBoxInBase;
			};
		
			if ("EXPLOSIVES" in _self.GainedTokensOpposing) then
			{
				_self.ActingOrdnanceBox = [MissionSide.Opposing] call _self.CreateExplosivesBoxInBase;
			};
			
			if ("OPTICS" in _self.GainedTokensActing) then
			{
				_self.ActingSpecialWeaponsBox = [MissionSide.Acting] call _self.CreateOpticsBoxInBase;
			};
		
			if ("OPTICS" in _self.GainedTokensOpposing) then
			{
				_self.OpposingSpecialWeaponsBox = [MissionSide.Opposing] call _self.CreateOpticsBoxInBase;
			};
			
			if ("SUPPLIES" in _self.GainedTokensActing) then
			{
				_self.ActingSupportBox = [MissionSide.Acting] call _self.CreateSupplyBoxInBase;
			};
		
			if ("SUPPLIES" in _self.GainedTokensOpposing) then
			{
				_self.OpposingSupportBox = [MissionSide.Opposing] call _self.CreateSupplyBoxInBase;
			};
		
			_self.ActingQuadbike = ["QUADBIKE", BaseMarker.LandVehicles, MissionSide.Acting, true] call _self.CreateSideVehicleInBase;
			_self.ActingMrap = ["MRAP", BaseMarker.LandVehicles, MissionSide.Acting, true] call _self.CreateSideVehicleInBase;
			_self.OpposingQuadbike = ["QUADBIKE", BaseMarker.LandVehicles, MissionSide.Opposing, true] call _self.CreateSideVehicleInBase;
			_self.OpposingMrap = ["MRAP", BaseMarker.LandVehicles, MissionSide.Opposing, true] call _self.CreateSideVehicleInBase;
			
			call _base.Setup;
		};
		
		protected method SetIndependentAlliance("_missionSide" as MissionSide, "_setAsAllied" as Boolean)
		{
			var _side = [_missionSide] call _self.GetActualSide;
			var _value = 1;
			
			if (!_setAsAllied) then {
				_value = 0;
			};
			
			resistance setFriend [_side, _value];
			_side setFriend [resistance, _value];
		};
		
		protected method MakeEmptyAmmoBox("_ammoBox" as Object)
		{
			clearWeaponCargoGlobal _ammoBox;
			clearMagazineCargoGlobal _ammoBox;
			clearBackpackCargoGlobal _ammoBox;
			clearItemCargoGlobal _ammoBox;
		};
		
		protected method FillBoxWithExplosives("_ammoBox" as Object, "_missionSide" as MissionSide)
		{
			var _side = [_missionSide] call _self.GetActualSide;
			
			var _scope = ["EXPLOSIVE CHARGE", _side] call _self.VehicleDictionary.GetVehicleType;
			_ammoBox addItemCargoGlobal [_scope, 5];
			
			_scope = ["SATCHEL CHARGE", _side] call _self.VehicleDictionary.GetVehicleType;
			_ammoBox addItemCargoGlobal [_scope, 2];
		};
		
		protected method FillBoxWithOptics("_ammoBox" as Object, "_missionSide" as MissionSide)
		{
			var _side = [_missionSide] call _self.GetActualSide;
			
			var _scope = ["OPTIC ACO", _side] call _self.VehicleDictionary.GetVehicleType;
			_ammoBox addItemCargoGlobal [_scope, 1];
			
			_scope = ["OPTIC ACO SMG", _side] call _self.VehicleDictionary.GetVehicleType;
			_ammoBox addItemCargoGlobal [_scope, 1];
			
			_scope = ["OPTIC RCO", _side] call _self.VehicleDictionary.GetVehicleType;
			_ammoBox addItemCargoGlobal [_scope, 1];
			
			_scope = ["OPTIC MOS", _side] call _self.VehicleDictionary.GetVehicleType;
			_ammoBox addItemCargoGlobal [_scope, 1];
			
			_scope = ["OPTIC LRPS", _side] call _self.VehicleDictionary.GetVehicleType;
			_ammoBox addItemCargoGlobal [_scope, 1];
		};
		
		protected method FillBoxWithSupplies("_ammoBox" as Object, "_missionSide" as MissionSide)
		{
			var _side = [_missionSide] call _self.GetActualSide;
			
			var _scope = ["BINOCULAR", _side] call _self.VehicleDictionary.GetVehicleType;
			_ammoBox addItemCargoGlobal [_scope, 3];
			
			_scope = ["LASER DESIGNATOR", _side] call _self.VehicleDictionary.GetVehicleType;
			_ammoBox addItemCargoGlobal [_scope, 1];
			
			_scope = ["DESIGNATOR BATTERIES", _side] call _self.VehicleDictionary.GetVehicleType;
			_ammoBox addItemCargoGlobal [_scope, 5];
			
			_scope = ["RANGE FINDER", _side] call _self.VehicleDictionary.GetVehicleType;
			_ammoBox addItemCargoGlobal [_scope, 1];
			
			_scope = ["FIRST AID KIT", _side] call _self.VehicleDictionary.GetVehicleType;
			_ammoBox addItemCargoGlobal [_scope, 10];
			
			_scope = ["GPS", _side] call _self.VehicleDictionary.GetVehicleType;
			_ammoBox addItemCargoGlobal [_scope, 10];
			
			_scope = ["FLASHLIGHT", _side] call _self.VehicleDictionary.GetVehicleType;
			_ammoBox addItemCargoGlobal [_scope, 10];
			
			_scope = ["IR LASER POINTER", _side] call _self.VehicleDictionary.GetVehicleType;
			_ammoBox addItemCargoGlobal [_scope, 10];
			
			_scope = ["BIPOD", _side] call _self.VehicleDictionary.GetVehicleType;
			_ammoBox addItemCargoGlobal [_scope, 1];
		};
		
		
		// Shuffles the items in an array randomly.
		// The array to shuffle.
		public static method ShuffleArray("_array" as Array)
		{
			for "_i" from 0 to (count _array) * 2 do
			{
				private _index1 = floor random count _array;
				private _index2 = floor random count _array;
				
				if (_index1 != _index2) then
				{
					var _item = _array select _index1;
					_array set [_index1, _array select _index2];
					_array set [_index2, _item];
				};
			};
		};
	};
};
