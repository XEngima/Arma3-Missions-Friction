/*
 * Name:	OperationShoeLace
 * Date:	2020-07-27
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Serious campaign with a story.
 */

using Tvtcf.Common;
using Tvtcf.Server;
using Campaigns;

namespace Campaigns.ShoeLace
{
	public class OperationShoeLace : Campaign
	{
		private fields ["_mEstablishments" as Mission, "_mCaptureTheAirbase" as Mission, "_mHawkDown" as Mission, "_mNightTensions" as Mission, "_mCatAndMouse" as Mission, "_mAirStationAssault" as Mission, "_mCannonballRun" as Mission];
		
		// Creates a OperationShoeLace object.
		public constructor()
		{
			call _base.Constructor;
		};
		
		// Shuffles the items in an array randomly.
		// The array to shuffle.
		public static method ShuffleArray("_array" as Array)
		{
			for "_i" from 0 to count _array do
			{
				private _index1 = floor random count _array;
				private _index2 = floor random count _array;
				
				if (_index1 != _index2) then
				{
					var _item = _array select _index1;
					_array set [_index1, _array select _index2];
					_array set [_index2, _item];
				};
			};
		};
		
		protected override method SelectMissions("_missions" as Array /* of Mission */)
		{
			// Any side can get AAF EXPLOSIVES.
			_mEstablishments = new Establishments;
			[selectRandom [west, east]] call _mEstablishments.SetActingSide;
			_missions pushBack _mEstablishments;
			
			// Winner gets AIRBASE.
			// Any side can use AAF EXPLOSIVES.
			_mCaptureTheAirbase = new CaptureTheAirbase;
			[selectRandom [west, east]] call _mCaptureTheAirbase.SetActingSide;
			_missions pushBack _mCaptureTheAirbase;
			
			// Airbase holders will blow up helicopter.
			// Runaways can gain AIRBASE SECRET.
			// Any side can use AAF EXPLOSIVES.
			_mHawkDown = new HawkDown;
			_missions pushBack _mHawkDown;
			
			// Airbase holders will guard the airbase.
			// Runaways can use information about the correct building in Nightly Tensions.
			// Airbase holder can loose HELICOPTER.
			// Any side can use AAF explosives.
			_mNightTensions = new NightTensions;
			_missions pushBack _mNightTensions;
			
			// Airbase holders are the hunters
			// Runaways can gain Guerilla Alliance.
			// Airbase holders may have lost their primary Helicopter.
			// Any side can use AAF explosives.
			_mCannonballRun = new CannonballRun;
			_missions pushBack _mCannonballRun;
			
			// Any side can gain a Drone
			// Runaways can use Guerilla Alliance.
			// Any side can use AAF explosives.
			_mCatAndMouse = new CatAndMouse;
			[selectRandom [west, east]] call _mCatAndMouse.SetActingSide;
			_missions pushBack _mCatAndMouse;
			
			// Airbase holders are attacking
			// Airbase holders can use Drone.
			// Any side can use AAF explosives.
			_mAirStationAssault = new AirStationAssault;
			_missions pushBack _mAirStationAssault;
		};
		
		public override method Mission GetNextMission("_lastMissionEndNarrative" as String)
		{
			[east] call _mNightTensions.SetActingSide;
			return _mNightTensions;
			
			private ["_mission" as Mission];
		
			_mission = [_lastMissionEndNarrative] call _base.GetNextMission;
			
			if (!isNull _mission) then
			{
				// In the Cannonball Run mission, the side that owns the airbase is the side hunting
				
				if (_mission is CannonballRun) then
				{
					if ("AIRBASE" in _self.GainedTokensWest) then {
						[west] call _mission.SetActingSide;
					}
					else {
						[east] call _mission.SetActingSide;
					};
				};
				
				// In the Hawk Down mission, the side that owns the airbase is about to blow up the helicopter
				
				if (_mission is HawkDown) then
				{
					if ("AIRBASE" in _self.GainedTokensWest) then {
						[west] call _mission.SetActingSide;
					}
					else {
						[east] call _mission.SetActingSide;
					};
				};
				
				// In the Night Tensions mission, the acting side is the side not owning the airbase
				if (_mission is NightTensions) then
				{
					if ("AIRBASE" in _self.GainedTokensWest) then {
						[east] call _mission.SetActingSide;
					}
					else {
						[west] call _mission.SetActingSide;
					};
				};
				
				// In the Air Station Assault mission, the defending side will be the ones not defending the Airbase in Night Tensions
				if (_mission is AirStationAssault) then
				{
					if ("AIRBASE" in _self.GainedTokensWest) then {
						[west] call _mission.SetActingSide;
					}
					else {
						[east] call _mission.SetActingSide;
					};
				};
			};
			
			return _mission;
		};
	};
};
