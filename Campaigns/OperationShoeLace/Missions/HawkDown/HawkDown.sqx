/*
 * Name:	EasyKill
 * Date:	2020-07-01
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A mission where the acting side tries to demolish a downed helicopter before the opposing side steals intels from it.
 * Sides: Acting destroys the helicopter and Opposing tries ty steal information from it.
 */

using Tvtcf.Common;
using Sqx.Markers;
using Tvtcf.Server;
using Campaigns;

namespace Campaigns.ShoeLace
{
	public class HawkDown : ShoeLaceMission
	{
		private fields ["_mGreyHawk" as Object, "_mGreyHawkMarker" as String, "_mIntelCollected" as Boolean, "_mStealIntelActionId" as Scalar];
		
		// Creates a AirBaseMadness object.
		public constructor()
		{
			call _base.Constructor;
			
			_mGreyHawkMarker = "";
			_mIntelCollected = false;
		};
		
		protected override method InitMission("_mission" as MissionSettings)
		{
			_mission.Name = "Hawk Down";
			_mission.StartMarkersActing = ["m05a_StartArea"];
			_mission.StartMarkersOpposing = ["m05o_StartArea"];
			_mission.SideMarkersActing = ["m05_CrashSite"];
			_mission.SideMarkersOpposing = ["m05_CrashSite"];
			_mission.AddReturnObjectiveForActing = true;
			_mission.AddReturnObjectiveForOpposing = true;
			_mission.StartTimeOfDay = 4 + floor random 17; // Between 4 and 20.
		};
		
		protected override method Setup()
		{
			_mGreyHawkMarker = selectRandom ["m05_HawkLocation1", "m05_HawkLocation2", "m05_HawkLocation3", "m05_HawkLocation4", "m05_HawkLocation5", "m05_HawkLocation6", "m05_HawkLocation7", "m05_HawkLocation8", "m05_HawkLocation9", "m05_HawkLocation10", "m05_HawkLocation11", "m05_HawkLocation12", "m05_HawkLocation13", "m05_HawkLocation14", "m05_HawkLocation15"];
			
			_mGreyHawk = ["TRANSPORT HELICOPTER", _mGreyHawkMarker, MissionSide.Acting] call _self.CreateSideVehicleOnMarker;
			_mGreyHawk setDamage [0.7, false];
			
			_mStealIntelActionId = [_mGreyHawk, "Investigate wreckage", MissionSide.Opposing] call _self.AddAction;

			call _base.Setup;
			
			// Spawn acting side's objects
			if (isNull _self.ActingOrdnanceBox) then {
				_self.ActingOrdnanceBox = ["AMMOBOX ORDNANCE", BaseMarker.AmmoCrate, MissionSide.Acting] call _self.CreateSideVehicleInBase;
			};
		};
		
		public override method OnAction("_actionId" as Scalar, "_target" as Object, "_actor" as Object)
		{
			if (_actionId == _mStealIntelActionId) then
			{
				_mIntelCollected = true;
				_self.GainedTokensOpposing pushBack "AIRBASE SECRET";
				[MissionSide.Opposing, "Gained: Airbase Secret."] call _self.ShowNotification;
				[[_actionId]] call _self.DeleteActions;
			};
		};
		
		protected override method String AddBriefingInfoForActing()
		{
			var _p1 = "A friendly transport helicopter was lost somewhere over the east woods. The helicopter was carrying highly ranked officers who would have supported a secret project to be carried out at the Stratis Airbase. It is of utterly importance that we find any survivors and destroy the helicopter before it falls into enemy hands.";
			var _p2 = "<br /><br />Remember to insert in a vehicle! You will need it to travel to the area.";
			var _p3 = "<br /><br />Remember to bring explosives!";
			
			return _p1 + _p2 + _p3 + call _base.AddBriefingInfoForActing;
		};
		
		protected override method String AddBriefingInfoForOpposing()
		{
			var _p1 = "Intelligence reveals that an enemy helicopter recently went down in the eastly woods. Judging by the current frequence of enemy radio transmissions it is now ween as highly interesting by HQ, and should be investigated with urge.";
			var _p2 = "<br /><br />Remember to insert in a vehicle! You will need it to travel to the area.";
			
			return _p1 + _p2 + call _base.AddBriefingInfoForOpposing;
		};
		
		protected override method MissionObjective CreatePrimaryObjectiveForActing()
		{
			private _shortDescription = "Destroy wreckage";
			private _longDescription = "Find the downed helicopter, check for survivors, and destroy the helicopter before it falls into enemy hands.";
			
			return [_shortDescription, _longDescription] new MissionObjective;
		};
		
		protected override method MissionObjective CreatePrimaryObjectiveForOpposing()
		{
			private _shortDescription = "Investigate wreckage";
			private _longDescription = "Find the downed enemy helicopter and investigate the wreckage before the enemy finds it.";
			
			return [_shortDescription, _longDescription] new MissionObjective;
		};
		
		protected override method ObjectiveState CheckPrimaryObjectiveStateActing()
		{
			if (!alive _mGreyHawk) then {
				if (_mIntelCollected) then {
					return ObjectiveState.Failed;
				}
				else {
					return ObjectiveState.Succeeded;
				};
			};
			
			return ObjectiveState.None;
		};
		
		protected override method ObjectiveState CheckPrimaryObjectiveStateOpposing()
		{
			private _greyHawkAlive = alive _mGreyHawk;
			
			if (_mIntelCollected) then {
				return ObjectiveState.Succeeded;
			};
			
			if (!_greyHawkAlive) then {
				return ObjectiveState.Failed;
			};
			
			return ObjectiveState.None;
		};
	};
};
