/*
 * Name:	AirStationAssault
 * Date:	2020-06-24
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A mission where players assault and defend Air Station Mike.
 */

using Tvtcf.Common;
using Tvtcf.Server;
using Campaigns;

namespace Campaigns.ShoeLace
{
	public class AirStationAssault : ShoeLaceMission
	{
		private fields ["_mPrimaryTargetVehicle" as Object, "_mSecondaryTargetVehicle" as Object, "_mAllVehicles" as Array];
		
		// Creates a AirStationAssault object.
		public constructor()
		{
			call _base.Constructor;
		};
		
		protected override method InitMission("_mission" as MissionSettings)
		{
			// The "acting" side will be the side attacking.
			// The "opposing" side will be the side defending.
			
			_mission.Name = "Air Station Assault";
			_mission.StartTimeOfDay = floor random 4;
			_mission.StartMarkersActing = ["m01a_startarea1", "m01a_startarea2", "m01a_startarea3"];
			_mission.StartMarkersOpposing = ["m01o_startarea1"];
			_mission.SideMarkersActing = ["m01a_PrimaryTarget"];
			_mission.AddReturnObjectiveForActing = true;
		};
		
		protected override method String AddBriefingInfoForActing()
		{
			var _p1 = "A lot of enemy supply trucks have been spotted entering Air Station Mike lately. Our enemies are obviously up to something. Let's hit while we have a good chance of make some damage.";
			var _p2 = "<br /><br />Remember to bring explosives!";
			var _p3 = "";
			
			if ("DRONE" in _self.GainedTokensActing) then {
				_p3 = "<br /><br />Earlier success has given you access to a UAV of type Darter.";
			};
			
			return _p1 + _p2 + _p3 + call _base.AddBriefingInfoForActing;
		};
		
		protected override method String AddBriefingInfoForOpposing()
		{
			var _p1 = "We have tried to keep this operation as secret as we can. If we keep Air Station Mike safe until tomorrow, we are in a good position to soon advance into enemy territory.";
			var _p2 = "";
			
			if ("DRONE" in _self.GainedTokensOpposing) then {
				_p2 = "<br /><br />Earlier success has given you access to a UAV of type Darter.";
			};
			
			return _p1 + _p2 + call _base.AddBriefingInfoForOpposing;
		};
		
		protected override method Setup()
		{
			private ["_targetVehicles" as Array, "_vehicleMarkers" as Array, "_vehicle" as Object];
		
			// Spawn acting side's base objects
			
			var _ammoBox = ["AMMOBOX ORDNANCE", BaseMarker.AmmoCrate, MissionSide.Acting] call _self.CreateSideVehicleInBase;
			
			if ("DRONE" in _self.GainedTokensActing) then {
				var _actualSide = [MissionSide.Acting] call _self.GetActualSide;
				var _uavBackpackClassName = ["UAV BACKPACK", _actualSide] call _self.ObjectTypeDictionary.GetVehicleType;
				var _uavTerminalClassName = ["UAV TERMINAL", _actualSide] call _self.ObjectTypeDictionary.GetVehicleType;
				_ammoBox addBackpackCargoGlobal [_uavBackpackClassName, 1];
				_ammoBox addItemCargoGlobal [_uavTerminalClassName, 1];
			};
			
			_ammoBox addBackpackCargoGlobal ["B_Kitbag_cbr", 1];
			
			// Spawn opposing side's base objects
			
			_ammoBox = ["AMMOBOX ORDNANCE", BaseMarker.AmmoCrate, MissionSide.Opposing] call _self.CreateSideVehicleInBase;
			
			if ("DRONE" in _self.GainedTokensOpposing) then {
				var _actualSide = [MissionSide.Opposing] call _self.GetActualSide;
				var _uavBackpackClassName = ["UAV BACKPACK", _actualSide] call _self.ObjectTypeDictionary.GetVehicleType;
				var _uavTerminalClassName = ["UAV TERMINAL", _actualSide] call _self.ObjectTypeDictionary.GetVehicleType;
				_ammoBox addBackpackCargoGlobal [_uavBackpackClassName];
				_ammoBox addItemCargoGlobal [_uavTerminalClassName, 1];
			};
			
			_ammoBox addBackpackCargoGlobal ["B_Kitbag_cbr", 1];
			
			// Spawn opposing side's objects
			
			_mAllVehicles = [];
			_targetVehicles = [];
			_vehicleMarkers = ["m01o_Vehicle1", "m01o_Vehicle2", "m01o_Vehicle3", "m01o_Vehicle4", "m01o_Vehicle5", "m01o_Vehicle6", "m01o_Vehicle7"];
			
			[_vehicleMarkers] call OperationShoeLace.ShuffleArray;
			
			_vehicle = ["AMMO TRUCK", _vehicleMarkers select 0, MissionSide.Opposing] call _self.CreateSideVehicleOnMarker;
			_vehicle setVariable ["ObjectiveText", "Destroy ammo truck"];
			_vehicle lock true;
			_targetVehicles pushBack _vehicle;
			_mAllVehicles pushBack _vehicle;
			
			_vehicle = ["DEVICE TRUCK", _vehicleMarkers select 1, MissionSide.Opposing] call _self.CreateSideVehicleOnMarker;
			_vehicle setVariable ["ObjectiveText", "Destroy device truck"];
			_vehicle lock true;
			_targetVehicles pushBack _vehicle;
			_mAllVehicles pushBack _vehicle;
			
			_vehicle = ["REPAIR TRUCK", _vehicleMarkers select 2, MissionSide.Opposing] call _self.CreateSideVehicleOnMarker;
			_vehicle setVariable ["ObjectiveText", "Destroy repair truck"];
			_vehicle lock true;
			_targetVehicles pushBack _vehicle;
			_mAllVehicles pushBack _vehicle;
			
			_vehicle = ["MEDICAL TRUCK", _vehicleMarkers select 3, MissionSide.Opposing] call _self.CreateSideVehicleOnMarker;
			_vehicle lock true;
			_mAllVehicles pushBack _vehicle;
			
			_vehicle = ["MRAP", _vehicleMarkers select 4, MissionSide.Opposing] call _self.CreateSideVehicleOnMarker;
			_mAllVehicles pushBack _vehicle;
			
			_vehicle = ["QUADBIKE", _vehicleMarkers select 5, MissionSide.Opposing] call _self.CreateSideVehicleOnMarker;
			_mAllVehicles pushBack _vehicle;
			
			[_targetVehicles] call OperationShoeLace.ShuffleArray;

			_mPrimaryTargetVehicle = _targetVehicles select 0;
			_mSecondaryTargetVehicle = _targetVehicles select 1;

			// Add an AI group defending the area.
			
			private _guard = ["RIFLEMAN", getMarkerPos "m01o_startarea1", MissionSide.Opposing] call _self.CreateSideAiSoldier;
			private _guardGroup = group _guard;
			["RIFLEMAN", getMarkerPos "m01o_startarea1", MissionSide.Opposing, _guardGroup] call _self.CreateSideAiSoldier;
			[_guardGroup, "m01o_startarea1"] execVM "Engima\SearchPatrol\SearchPatrol.sqf";
			
			call _base.Setup;
		};

		protected override method MissionObjective CreatePrimaryObjectiveForActing()
		{
			private _shortDescription = _mPrimaryTargetVehicle getVariable "ObjectiveText";
			private _longDescription = _shortDescription + ". The truck is located somewhere inside the area of Air Station Mike-26.";
			
			return [_shortDescription, _longDescription] new MissionObjective;
		};
		
		protected override method MissionObjective CreateSecondaryObjectiveForActing()
		{
			private _shortDescription = _mSecondaryTargetVehicle getVariable "ObjectiveText";
			private _longDescription = _shortDescription + ". The truck is located somewhere inside the area of Air Station Mike-26.";
			
			return [_shortDescription, _longDescription] new MissionObjective;
		};

		protected override method MissionObjective CreatePrimaryObjectiveForOpposing()
		{
			private _shortDescription = "Patrol Air Station Mike-26";
			private _longDescription = "Patrol the Air Station Mike-26 and keep it safe from intruders.";
			
			return [_shortDescription, _longDescription] new MissionObjective;
		};
		
		protected override method MissionObjective CreateSecondaryObjectiveForOpposing()
		{
			private _shortDescription = "Hunt down any intruders";
			private _longDescription = "Hunt down and kill all intruders.";
			
			return [_shortDescription, _longDescription] new MissionObjective;
		};
		
		protected override method ObjectiveState CheckPrimaryObjectiveStateActing()
		{
			if (!alive _mPrimaryTargetVehicle) then {
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
		
		protected override method ObjectiveState CheckSecondaryObjectiveStateActing()
		{
			if (!alive _mSecondaryTargetVehicle) then {
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
		
		protected override method ObjectiveState CheckPrimaryObjectiveStateOpposing()
		{
			private _vehiclesAlive = { alive _x } count _mAllVehicles == count _mAllVehicles;
			
			if (!_vehiclesAlive) then {
				return ObjectiveState.Failed;
			};
			
			private _missionHasEnded = _self.IsCancelling;
			private _allEnemiesDead = (call _self.CountUnitsAliveActing) == 0;
			
			if (_vehiclesAlive && (_allEnemiesDead || _missionHasEnded)) then {
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
		
		protected override method ObjectiveState CheckSecondaryObjectiveStateOpposing()
		{
			private _allEnemiesDead = (call _self.CountUnitsAliveActing) == 0;
			
			if (_allEnemiesDead) then {
				return ObjectiveState.Succeeded;
			};
			
			// If the acting side has extracted, the opposing side has failed to hunt them down.
			if (_self.ReturnObjectiveStateActing == ObjectiveState.Succeeded) then {
				return ObjectiveState.Failed;
			};
			
			return ObjectiveState.None;
		};
	};
};
