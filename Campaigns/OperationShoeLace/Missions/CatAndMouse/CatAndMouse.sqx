/*
 * Name:	CatAndMouse
 * Date:	2020-07-27
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A mission where both sides are inserted among the housed in Girna and looking for the same equipment.
 */

using Sqx.Markers;
using Tvtcf.Common;
using Tvtcf.Server;
using Campaigns;

namespace Campaigns.ShoeLace
{
	public class CatAndMouse : ShoeLaceMission
	{
		private fields ["_mBox" as Object, "_mBoxOwnerSide" as String, "_mActingActionId" as Scalar, "_mOpposingActionId" as Scalar];
		private fields ["_mIndependentSpawnTime" as Scalar, "_mIndependentForceHasSpawned" as Boolean];
	
		// Creates a CatAndMouse object.
		public constructor()
		{
			call _base.Constructor;
			_mBoxOwnerSide = "";
			_mActingActionId = -1;
			_mOpposingActionId = -1;
			_mIndependentForceHasSpawned = false;
			_mIndependentSpawnTime = 5 + floor random 15;
		};
		
		protected override method InitMission("_mission" as MissionSettings)
		{
			_mission.Name = "Cat And Mouse";
			_mission.StartTimeOfDay = 18;
			
			private _startMarkers = ["m09_StartMarker1", "m09_StartMarker2", "m09_StartMarker3", "m09_StartMarker4", "m09_StartMarker5", "m09_StartMarker6", "m09_StartMarker7", "m09_StartMarker8", "m09_StartMarker9", "m09_StartMarker10", "m09_StartMarker11", "m09_StartMarker12"];
			
			[_startMarkers] call ShoeLaceMission.ShuffleArray;
			
			_mission.InsertionAreasActing = [_startMarkers select 0, _startMarkers select 1, _startMarkers select 2, _startMarkers select 3, _startMarkers select 4, _startMarkers select 5];
			_mission.InsertionAreasOpposing = [_startMarkers select 6, _startMarkers select 7, _startMarkers select 8, _startMarkers select 9, _startMarkers select 10, _startMarkers select 11];
		};
		
		protected override method Setup()
		{
			var _boxPos = ["m_Girna"] call MarkerHelper.GetRandomPosInsideMarker;
		
			_mBox = ["Land_WoodenBox_F", _boxPos, random 360, true] call _self.CreateVehicle;
			
			_mActingActionId = [_mBox, "Take drone equipment", MissionSide.Acting] call _self.AddAction;
			_mOpposingActionId = [_mBox, "Take drone equipment", MissionSide.Opposing] call _self.AddAction;
			
			call _base.Setup;
			
			var _actingAndIndependentAllied = "AAF ALLIANCE" in _self.GainedTokensActing;
			var _opposingAndIndependentAllied = "AAF ALLIANCE" in _self.GainedTokensOpposing;
			
			[MissionSide.Acting, _actingAndIndependentAllied] call _self.SetIndependentAlliance;
			[MissionSide.Opposing, _opposingAndIndependentAllied] call _self.SetIndependentAlliance;
		};
		
		public override method OnAction("_actionId" as Scalar, "_target" as Object, "_actor" as Object)
		{
			if (_actionId == _mActingActionId) then {
				_mBox setPos [0, 0 ,0];
				_mBoxOwnerSide = "ACTING";
			};
			
			if (_actionId == _mOpposingActionId) then {
				_mBox setPos [0, 0 ,0];
				_mBoxOwnerSide = "OPPOSING";
			};
		};
		
		protected override method String AddBriefingActing()
		{
			var _p1 = "An intercepted radio message reveals that AAF drone equipment has been accidentaly left somewhere in Girna. The message was totally unencrypted, so expect that both AAF and enemy forces can show up too.";
			
			var _p2 = "";
			if ("AAF ALLIANCE" in _self.GainedTokensActing) then {
				_p2 = "<br /><br />We have currently a ceasefire agreement with AAF. However, be very careful with target identification, accidentally kill any of them we will loose alliance.";
			};
			
			return _p1 + _p2 + call _base.AddBriefingActing;
		};
		
		protected override method String AddBriefingOpposing()
		{
			var _p1 = "An intercepted radio message reveals that AAF drone equipment has been accidentaly left somewhere in Girna. The message was totally unencrypted, so expect that both AAF and enemy forces can show up too.";
			
			var _p2 = "";
			if ("AAF ALLIANCE" in _self.GainedTokensActing) then {
				_p2 = "<br /><br />We have currently a ceasefire agreement with AAF. However, be very careful with target identification, accidentally kill any of them we will loose alliance.";
			};
			
			return _p1 + _p2 + call _base.AddBriefingOpposing;
		};
		
		protected override method MissionObjective AddPrimaryObjectiveActing()
		{
			return ["Find the drone.", "Find the wooden box with the drone equipment. It can be anywhere in Girna with 75 meters from the town centre, inside a building or outside."] new MissionObjective;
		};
		
		protected override method MissionObjective AddSecondaryObjectiveActing()
		{
			return ["Kill the enemy squad."] new MissionObjective;
		};
		
		protected override method MissionObjective AddPrimaryObjectiveOpposing()
		{
			return ["Find the drone.", "Find the wooden box with the drone equipment. It can be anywhere in Girna with 75 meters from the town centre, inside a building or outside."] new MissionObjective;
		};
		
		protected override method MissionObjective AddSecondaryObjectiveOpposing()
		{
			return ["Kill the enemy squad."] new MissionObjective;
		};
		
		protected override method ObjectiveState CheckPrimaryObjectiveStateActing()
		{
			var _boxIsOurs = _mBoxOwnerSide == "ACTING";
			
			if (_boxIsOurs) then {
				_self.GainedTokensActing pushBack "DRONE";
				[MissionSide.Acting, "Gained: Drone."] call _self.ShowNotification;
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
		
		protected override method ObjectiveState CheckSecondaryObjectiveStateActing()
		{
			private _allEnemiesDead = call _self.CountUnitsAliveOpposing == 0;
			
			if (_allEnemiesDead) then {
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
		
		protected override method ObjectiveState CheckPrimaryObjectiveStateOpposing()
		{
			var _boxIsOurs = _mBoxOwnerSide == "OPPOSING";
			
			if (_boxIsOurs) then {
				_self.GainedTokensOpposing pushBack "DRONE";
				[MissionSide.Opposing, "Gained: Drone."] call _self.ShowNotification;
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
		
		protected override method ObjectiveState CheckSecondaryObjectiveStateOpposing()
		{
			private _allEnemiesDead = call _self.CountUnitsAliveActing == 0;
			
			if (_allEnemiesDead) then {
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
		
		protected override method OnEachIteration()
		{
			if (!_mIndependentForceHasSpawned && _self.MissionTimeElapsed >= _mIndependentSpawnTime) then
			{
				var _spawnMarker = selectRandom ["m09_IndependentSpawnMarker1", "m09_IndependentSpawnMarker2", "m09_IndependentSpawnMarker3", "m09_IndependentSpawnMarker4"];
			
				var _group = createGroup [independent, true];
				["I_soldier_F", getMarkerPos _spawnMarker, _group] call _self.CreateAiSoldier;
				["I_soldier_F", getMarkerPos _spawnMarker, _group] call _self.CreateAiSoldier;
				[_group, "m_Girna"] execVM "Engima\SearchPatrol\SearchPatrol.sqf";
				
				_mIndependentForceHasSpawned = true;
			};
		};
		
		public override method Cleanup()
		{
			[MissionSide.Acting, false] call _self.SetIndependentAlliance;
			[MissionSide.Opposing, false] call _self.SetIndependentAlliance;
		};
	};
};
