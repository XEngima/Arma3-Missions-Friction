/*
 * Name:	Establishments
 * Date:	2020-07-04
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * An initial mission to mostly get used to the mission mechanics and set the context.
 * Sides: ACTING drives a truck to Limeri Bay, while OPPOSING goes to Agia Marian to get the mail.
 */

using Tvtcf.Common;
using Sqx.Markers;
using Tvtcf.Server;
using Campaigns;

namespace Campaigns.ShoeLace
{
	public class Establishments : ShoeLaceMission
	{
		private fields ["_mAmmoTruck" as Object, "_mMailBox" as Object, "_mExplosivesBox" as Object, "_mDeltaActingAreaMarker" as String, "_mDeltaOpposingAreaMarker" as String];
		private fields ["_mActingEnterDeltaAreaTime" as Scalar, "_mOpposingEnterDeltaAreaTime" as Scalar];
		private fields ["_mConfiscateActionActing" as Scalar, "_mConfiscateActionOpposing" as Scalar, "_mMailIsCollected" as Boolean, "_mCheckMailActionId" as Scalar];
		private fields ["_mInvestigationCompleteActing", "_mInvestigationCompleteOpposing"];
		
		// Creates a Establishments object.
		public constructor()
		{
			call _base.Constructor;
			
			_mActingEnterDeltaAreaTime = -1;
			_mOpposingEnterDeltaAreaTime = -1;
			_mMailIsCollected = false;
			_mInvestigationCompleteActing = false;
			_mInvestigationCompleteOpposing = false;
		};
		
		protected override method InitMission("_mission" as MissionSettings)
		{
			_mission.Name = "Establishments";
			_mission.StartTimeOfDay = 4 + floor random 8;
			
			_mission.VisibleMarkersActing = ["m07a_LimeriBay", "m07a_PointDelta"];
			_mission.VisibleMarkersOpposing = ["m07o_MilitaryRange", "m07o_PointDelta"];
			
			// Move delta markers to random fishy places
			_mDeltaActingAreaMarker = selectRandom ["m_FishyPlaceCamoArea", "m_FishyPlaceCampingArea", "m_FishyPlaceRustyArea"];
			"m07a_PointDelta" setMarkerPos getMarkerPos _mDeltaActingAreaMarker;
			
			_mDeltaOpposingAreaMarker = selectRandom ["m_FishyPlaceCamoArea", "m_FishyPlaceCampingArea", "m_FishyPlaceRustyArea"];
			"m07o_PointDelta" setMarkerPos getMarkerPos _mDeltaOpposingAreaMarker;
		};
		
		protected override method String AddBriefingInfoForActing()
		{
			return "Welcome! The situation is calm and under control for the moment, and the whole brigade is working on establishments and setting up the perimiters. No hostile contacts this far, but local guerillas have expressed their hostility, and group Alpha Six has reported seing some kind of activity around Point Delta. ";
		};
		
		protected override method String AddBriefingInfoForOpposing()
		{
			return "Welcome! The situation is calm and under control for the moment, and the whole brigade is working on establishments and setting up the perimiters. No hostile contacts this far, but local guerillas have expressed their hostility, and group Charlie Four has reported seing some kind of activity around Point Delta.";
		};
		
		protected override method MissionObjective AddPrimaryObjectiveForActing()
		{
			private _shortDescription = "Deliver supplies";
			private _longDescription = "Drive the truck to Limeri Bay, park it among the other vehicles there, and leave it there. Then there are other vehicles at your disposal.";
			
			return [_shortDescription, _longDescription] new MissionObjective;
		};
		
		protected override method MissionObjective AddSecondaryObjectiveForActing()
		{
			private _shortDescription = "Investigate Point Delta";
			private _longDescription = "Go to Point Delta and investigate the area. Search for at least two minutes, and confiscate anything that you find useful - like guerilla ammo - for the rest of the operation. You can confiscate things that you find with the action menu. But be aware of the risk of possible hostile contacts!";
			
			return [_shortDescription, _longDescription] new MissionObjective;
		};
		
		protected override method MissionObjective AddPrimaryObjectiveForOpposing()
		{
			private _shortDescription = "Get the mail";
			private _longDescription = "Go to Agia Marina's military range to get the brigade's mail. Find the pallet - a big box - and check if there is anything for us.";
			
			return [_shortDescription, _longDescription] new MissionObjective;
		};
		
		protected override method MissionObjective AddSecondaryObjectiveForOpposing()
		{
			private _shortDescription = "Investigate Point Delta";
			private _longDescription = "Go to Point Delta and investigate the area. Search for at least two minutes, and confiscate anything that you find useful - like guerilla ammo - for the rest of the operation. You can confiscate things that you find with the action menu. But be aware of the risk of possible hostile contacts!";
			
			return [_shortDescription, _longDescription] new MissionObjective;
		};
		
		protected override method Setup()
		{
			var _guerillaClassNames = ["I_G_Soldier_A_F", "I_G_Soldier_AR_F", "I_G_medic_F", "I_G_engineer_F", "I_G_Soldier_exp_F", "I_G_Soldier_GL_F", "I_G_Soldier_M_F", "I_G_officer_F", "I_G_Soldier_F", "I_G_Soldier_LAT_F", "I_G_Soldier_lite_F", "I_G_Soldier_SL_F", "I_G_Soldier_TL_F"];
			
			// Select two random fishy places to populate with guerillas (it might be different, it might be the same).
			var _fishyPlaceMarkers = ["m_FishyPlaceCamoArea", "m_FishyPlaceCampingArea", "m_FishyPlaceRustyArea"];
			var _populatedFishyPlaceMarker1 = selectRandom _fishyPlaceMarkers;
			var _populatedFishyPlaceMarker2 = selectRandom _fishyPlaceMarkers;
			
			// Spawn guerillas at the selected fishy place and make them patrol
			var _group = createGroup [independent, true];
			[selectRandom _guerillaClassNames, getMarkerPos _populatedFishyPlaceMarker1, _group] call _self.CreateAiSoldier;
			[selectRandom _guerillaClassNames, getMarkerPos _populatedFishyPlaceMarker1, _group] call _self.CreateAiSoldier;
			[_group, _populatedFishyPlaceMarker1] execVM "Engima\SearchPatrol\SearchPatrol.sqf";
			
			// Spawn guereillas at the other selected fishy place and make them patrol
			_group = createGroup [independent, true];
			[selectRandom _guerillaClassNames, getMarkerPos _populatedFishyPlaceMarker2, _group] call _self.CreateAiSoldier;
			[selectRandom _guerillaClassNames, getMarkerPos _populatedFishyPlaceMarker2, _group] call _self.CreateAiSoldier;
			[_group, _populatedFishyPlaceMarker2] execVM "Engima\SearchPatrol\SearchPatrol.sqf";
			
			// Spawn an ammo truck and vehicles in the acting base
			_mAmmoTruck = ["AMMO TRUCK", BaseMarker.LandVehicles, MissionSide.Acting, true] call _self.CreateSideVehicleInBase;
			
			// Create mail box at Military Range
			private _mailBoxPosition = ["m_MilitaryRangeArea"] call MarkerHelper.GetRandomPosInsideMarker;
			_mMailBox = ["Land_PaperBox_closed_F", _mailBoxPosition, random 360] call _self.CreateVehicle;
			_mCheckMailActionId = [_mMailBox, "Collect mail", MissionSide.Opposing] call _self.AddAction;
			
			// Create vehicles at Limeri Bay
			["MRAP", "m07a_LimeriBayMrap", MissionSide.Acting] call _self.CreateSideVehicleOnMarker;
			["QUADBIKE", "m07a_LimeriBayQuadBike", MissionSide.Acting] call _self.CreateSideVehicleOnMarker;
			
			// Create Explosives box that may be found at point Delta
			private _explosivesBoxAreaMarker = selectRandom [_mDeltaActingAreaMarker, _mDeltaOpposingAreaMarker];
			
			_mExplosivesBox = ["Box_IND_AmmoOrd_F", [_explosivesBoxAreaMarker] call MarkerHelper.GetRandomPosInsideMarker, random 360] call _self.CreateVehicle;
			_mConfiscateActionActing = [_mExplosivesBox, "Confiscate ammo box", MissionSide.Acting] call _self.AddAction;
			_mConfiscateActionOpposing = [_mExplosivesBox, "Confiscate ammo box", MissionSide.Opposing] call _self.AddAction;
			
			// Ambient Infantry
			
			var _ambientGroupsCount = 2 + floor random 10;
			
			for "_i" from 0 to _ambientGroupsCount - 1 do
			{
				var _ambientGroup = createGroup [independent, true];
				var _ambientPos = ["m07_CenterPosition"] call MarkerHelper.GetRandomPosInsideMarker;
				var _ambientGroupUnitCount = 1 + floor random 3;
				
				for "_j" from 0 to _ambientGroupUnitCount - 1 do
				{
					[selectRandom _guerillaClassNames, _ambientPos, _ambientGroup] call _self.CreateAiSoldier;
				};
				
				[_ambientGroup, "m07_CenterPosition"] execVM "Engima\SearchPatrol\SearchPatrol.sqf";
			};

			call _base.Setup;
		};

		public override method OnAction("_actionId" as Scalar, "_target" as Object, "_actor" as Object)
		{
			if (_actionId == _mCheckMailActionId) then {
				_mMailIsCollected = true;
			};
			
			if (_actionId == _mConfiscateActionActing || _actionId == _mConfiscateActionOpposing) then
			{
				if (_actionId == _mConfiscateActionActing) then {
					_self.GainedTokensActing pushBack "EXPLOSIVES";
					[MissionSide.Acting, "Gained: Box of explosives."] call _self.ShowNotification;
					_mInvestigationCompleteActing = true;
				};
				
				if (_actionId == _mConfiscateActionOpposing) then {
					_self.GainedTokensOpposing pushBack "EXPLOSIVES";
					[MissionSide.Opposing, "Gained: Box of explosives."] call _self.ShowNotification;
					_mInvestigationCompleteOpposing = true;
				};
				
				_mExplosivesBox setPos [0, 0, 0]; // Get rid of it
			};
		};
		
		protected override method ObjectiveState CheckPrimaryObjectiveStateActing()
		{
			var _ammoTruckAtDestination = (getPos _mAmmoTruck) inArea "m_LimeriBayArea";
			var _crewHasLeftTruck = (count crew _mAmmoTruck) == 0;
			
			if (_ammoTruckAtDestination && _crewHasLeftTruck) then {
				_mAmmoTruck lock true;
				_self.GainedTokensActing pushBack "BASIC WEAPONS";
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
		
		private method ObjectiveState CheckSecondaryObjectiveState("_units" as Array, "_enteredAreaTime" as Scalar)
		{
			// Fulfilled when units on the acting side has been inside delta area for more than two minute.
			
			private _insideArea = { alive _x && { _x inArea _mDeltaActingAreaMarker }} count _units > 0;
			private _beenThereTwoMinutes = _enteredAreaTime > 0 && time > _enteredAreaTime + 120;
			
			if (_insideArea && _beenThereTwoMinutes) then {
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
		
		protected override method ObjectiveState CheckSecondaryObjectiveStateActing()
		{
			if (_mInvestigationCompleteActing) then {
				return ObjectiveState.Succeeded;
			};
		
			return [_self.ActingUnits, _mActingEnterDeltaAreaTime] call _self.CheckSecondaryObjectiveState;
		};
		
		protected override method ObjectiveState CheckPrimaryObjectiveStateOpposing()
		{
			if (_mMailIsCollected) then {
				_self.GainedTokensOpposing pushBack "BASIC WEAPONS";
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
		
		protected override method ObjectiveState CheckSecondaryObjectiveStateOpposing()
		{
			if (_mInvestigationCompleteOpposing) then {
				return ObjectiveState.Succeeded;
			};
		
			return [_self.OpposingUnits, _mOpposingEnterDeltaAreaTime] call _self.CheckSecondaryObjectiveState;
		};
		
		private method GroupInsideDeltaArea("_missionSide" as MissionSide)
		{
			if (_missionSide == MissionSide.Acting) then {
				return { alive _x && { _x inArea _mDeltaActingAreaMarker }} count _self.ActingUnits > 0;
			}
			else {
				return { alive _x && { _x inArea _mDeltaOpposingAreaMarker }} count _self.OpposingUnits > 0;
			};
		};
		
		protected override method OnEachIteration()
		{
			if ([MissionSide.Acting] call _self.GroupInsideDeltaArea) then {
				if (_mActingEnterDeltaAreaTime < 0) then {
					_mActingEnterDeltaAreaTime = time;
				};
			}
			else {
				_mActingEnterDeltaAreaTime = -1;
			};
			
			if ([MissionSide.Opposing] call _self.GroupInsideDeltaArea) then {
				if (_mOpposingEnterDeltaAreaTime < 0) then {
					_mOpposingEnterDeltaAreaTime = time;
				};
			}
			else {
				_mOpposingEnterDeltaAreaTime = -1;
			};
		};
	};
};
