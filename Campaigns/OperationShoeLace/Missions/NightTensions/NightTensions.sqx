/*
 * Name:	NightTensions
 * Date:	2020-07-04
 * Version: 1.0
 * Author:  Engima
 *
 * The acting side is getting in and tries to steal information.
 * Sides: ACTING is breaking in, and OPPOSING guards the area.
 */

using Tvtcf.Common;
using Tvtcf.Server;
using Campaigns;

namespace Campaigns.ShoeLace
{
	public class NightTensions : ShoeLaceMission
	{
		private fields ["_mDrawingsAreStolen" as Boolean, "_mPrimaryObjectiveMarker" as String, "_mPrimaryObjectiveNumber" as Scalar];
		private fields ["_mAmbientChopper" as Object, "_mAmbientChopperHasLeft" as Boolean, "_mAmbientChopperStartTime" as Scalar, "_mSoundSource" as Object];
		private fields ["_mHelicopter" as Object];
		private fields ["_mAmbientVehicle1" as Object, "_mAmbientVehicle1StartTime" as Scalar];
		private fields ["_mAmbientVehicle2" as Object, "_mAmbientVehicle2StartTime" as Scalar];
	
		// Creates a NightTensions object.
		public constructor()
		{
			call _base.Constructor;
			
			_mDrawingsAreStolen = false;
			_mAmbientChopperHasLeft = false;
			_mAmbientVehicle1 = objNull;
			_mAmbientVehicle2 = objNull;
			_mSoundSource = objNull;
			_mHelicopter = objNull;
		};
		
		protected override method InitMission("_mission" as MissionSettings)
		{
			_mission.Name = "Night Tensions";
			_mission.StartTimeOfDay = 0;
			_mission.StartMarkersActing = ["m06a_StartArea1", "m06a_StartArea2", "m06a_StartArea3"];
			_mission.StartMarkersOpposing = ["m06o_StartArea1"];
			_mission.SideMarkersActing = ["m06a_PrimaryObjective1", "m06a_PrimaryObjective2", "m06a_PrimaryObjective3", "m06a_PrimaryObjective4", "m06a_PrimaryObjective5", "m06a_RoadBlockWarning", "m06a_DestroyHelicopter"];
			_mission.SideMarkersOpposing = ["m06a_PrimaryObjective1", "m06a_PrimaryObjective2", "m06a_PrimaryObjective3", "m06a_PrimaryObjective4", "m06a_PrimaryObjective5", "m06a_RoadBlockWarning"];
			_mission.AddReturnObjectiveForActing = true;
		};
		
		private method Object CreateTableWithLaptop("_marker" as String)
		{
			var _building = nearestBuilding getMarkerPos _marker;
			var _buildingPos = _building buildingPos (floor random 5);
			
			var _desk = "Land_TableDesk_F" createVehicle [_buildingPos select 0, _buildingPos select 1, 100];
			_desk setDir getDir _building;
			_desk setPosATL _buildingPos;
			_desk setVariable ["ObjectiveMarker", _marker];
			
			var _laptop = "Item_Laptop_Unfolded" createVehicle _buildingPos;

			_laptop attachTo [_desk, [0, 0, 0.7]];
			_laptop setDir 180;
			
			return _desk;
		};
		
		protected override method Setup()
		{
			_mPrimaryObjectiveNumber = selectRandom [1,2,3,4,5];
			_mPrimaryObjectiveMarker = "m06a_PrimaryObjective" + str _mPrimaryObjectiveNumber;
			
			["ASSAULT BOAT", MissionSide.Acting, BaseMarker.Naval] call _self.CreateSideVehicleOnBaseMarker;
			
			// Road Block defending airport entry
			
			["Land_BarGate_F", "m06o_RoadBlock_BarGate"] call _self.CreateVehicleOnMarker;
			["RoadCone_L_F", "m06o_RoadBlock_RoadCone"] call _self.CreateVehicleOnMarker;
			["MRAP HMG", MissionSide.Opposing, "m06o_RoadBlock_Vehicle", false, true] call _self.CreateSideVehicleOnMarker;
			private _guard1 = ["RIFLEMAN", MissionSide.Opposing, getMarkerPos "m06o_RoadBlock_Guard"] call _self.CreateAiSoldierBySide;
			_guard1 setDir markerDir "m06o_RoadBlock_Guard";
			["RIFLEMAN", MissionSide.Opposing, getMarkerPos "m06o_RoadBlock_Guard", group _guard1] call _self.CreateAiSoldierBySide;
			
			// Desks and laptops
			
			var _desk1 = ["m06a_PrimaryObjective1"] call _self.CreateTableWithLaptop;
			var _desk2 = ["m06a_PrimaryObjective2"] call _self.CreateTableWithLaptop;
			var _desk3 = ["m06a_PrimaryObjective3"] call _self.CreateTableWithLaptop;
			var _desk4 = ["m06a_PrimaryObjective4"] call _self.CreateTableWithLaptop;
			var _desk5 = ["m06a_PrimaryObjective5"] call _self.CreateTableWithLaptop;
			
			[_desk1, "Search desk", MissionSide.Acting] call _self.AddAction;
			[_desk2, "Search desk", MissionSide.Acting] call _self.AddAction;
			[_desk3, "Search desk", MissionSide.Acting] call _self.AddAction;
			[_desk4, "Search desk", MissionSide.Acting] call _self.AddAction;
			[_desk5, "Search desk", MissionSide.Acting] call _self.AddAction;
			
			// Helicopter
			
			_mHelicopter = ["HEAVY ATTACK HELICOPTER", MissionSide.Opposing, "m_AirbaseHelipad1", false, false] call _self.CreateSideVehicleOnMarker;
			_mHelicopter lock true;
			
			// Add an AI group that helps defending the area.
			
			var _guard = ["RIFLEMAN", MissionSide.Opposing, getMarkerPos "m06o_StartArea1"] call _self.CreateAiSoldierBySide;
			var _guardGroup = group _guard;
			["RIFLEMAN", MissionSide.Opposing, getMarkerPos "m06o_StartArea1", _guardGroup] call _self.CreateAiSoldierBySide;
			[_guardGroup, "m06o_StartArea1"] execVM "Engima\SearchPatrol\SearchPatrol.sqf";
			
			// Add another defending the helicopter
			
			_guard = ["RIFLEMAN", MissionSide.Opposing, getMarkerPos "m06o_HelicopterArea"] call _self.CreateAiSoldierBySide;
			_guardGroup = group _guard;
			["RIFLEMAN", MissionSide.Opposing, getMarkerPos "m06o_HelicopterArea", _guardGroup] call _self.CreateAiSoldierBySide;
			[_guardGroup, "m06o_HelicopterArea"] execVM "Engima\SearchPatrol\SearchPatrol.sqf";

			// Abient stuff
			_mAmbientChopper = ["TRANSPORT HELICOPTER", MissionSide.Opposing, "m06o_AmbientHelicopter", false, true] call _self.CreateSideVehicleOnMarker;
			_mAmbientChopperStartTime = floor random 40;
			
			_mAmbientVehicle1StartTime = ceil random 10;
			_mAmbientVehicle2StartTime = ceil random 10;
			
			// Ambient parked vehicles 
			
			var _parkedVehicleMarkers = [
				"m06o_AmbientParkedVehicle1", "m06o_AmbientParkedVehicle2", "m06o_AmbientParkedVehicle3", "m06o_AmbientParkedVehicle4","m06o_AmbientParkedVehicle5",
				"m06o_AmbientParkedVehicle6", "m06o_AmbientParkedVehicle7", "m06o_AmbientParkedVehicle8", "m06o_AmbientParkedVehicle9", "m06o_AmbientParkedVehicle10"
			];
			
			[_parkedVehicleMarkers] call OperationShoeLace.ShuffleArray;
			
			var _vehicleTypes = ["MRAP", "MRAP", "QUADBIKE", "QUADBIKE", "TRANSPORT TRUCK", "REPAIR TRUCK", "MEDICAL TRUCK"];
			var _numberOfVehicles = 2 + floor random 7; // Between 2 and 8.
			
			for "_i" from 0 to _numberOfVehicles - 1 do
			{
				var _marker = _parkedVehicleMarkers select _i;
				var _vehicleType = selectRandom _vehicleTypes;
				
				[_vehicleType, MissionSide.Opposing, _marker] call _self.CreateSideVehicleOnMarker;
			};
			
			call _base.Setup;
		};
		
		public override method OnAction("_actionId" as Scalar, "_target" as Object, "_actor" as Object)
		{
			var _objectiveMarker = _target getVariable "ObjectiveMarker";
			
			if (_objectiveMarker == _mPrimaryObjectiveMarker) then
			{
				_mDrawingsAreStolen = true;
				[MissionSide.Acting, "Found drawings! Task will be completed if you bring them home."] call _self.ShowNotification;
				_mSoundSource = createSoundSource ["Sound_Alarm2", getPos nearestBuilding player, [], 0];
			}
			else {
				var _text = "Found clue to search in building " + str _mPrimaryObjectiveNumber;
				[MissionSide.Acting, _text] call _self.ShowNotification;
			};
		};
		
		protected override method String AddBriefingInfoForActing()
		{
			var _briefingText = "We are now quite sure that the enemy is about to raise some kind of military building or weapon. The military drawings are most likely in a desk in one of the five office buildings marked on the map.";
			
			if ("AIRBASE SECRET" in _self.EarlierGainedTokensActing) then {
				_briefingText = "Earlier collected intel (AIRBASE SECRET) reveals that the secret military drawings are in building " + markerText _mPrimaryObjectiveMarker + ".";
			};
			
			_briefingText = _briefingText + "<br /><br />Remember to get in the assault boat before inserting and to bring explosives (if you have any).";
			
			return _briefingText + call _base.AddBriefingInfoForActing;
		};
		
		protected override method String AddBriefingInfoForOpposing()
		{
			var _text = "A not so ordinary night at the airbase. The threat of intruders breaking in and stealing materiel is always present, but intelligence reveals that there might be a higher risk of that than usual. The five main enterable magazines are military offices containing information that is not to be stolen at any cost, and the attack helicopter at the tower is a high value target for enemy forces.";
			return _text + call _base.AddBriefingInfoForOpposing;
		};
		
		protected override method MissionObjective CreatePrimaryObjectiveForActing()
		{
			private _shortDescription = "Steal military drawings";
			private _longDescription = "Find the office desk with military drawings in one of the numbered buildings and steal them.";
			
			return [_shortDescription, _longDescription] new MissionObjective;
		};
		
		protected override method MissionObjective CreateSecondaryObjectiveForActing()
		{
			private _shortDescription = "Destroy Helicpter";
			private _longDescription = "Destroy the enemy attack helicopter. But only if it is safe! If you don't return with the drawings the primary objective will be compromised.";
			
			return [_shortDescription, _longDescription] new MissionObjective;
		};
		
		protected override method MissionObjective CreatePrimaryObjectiveForOpposing()
		{
			private _shortDescription = "Patrol the airbase";
			private _longDescription = "Patrol the airbase and keep it safe by preventing any intruders to steal and destroy anything.";
			
			return [_shortDescription, _longDescription] new MissionObjective;
		};
		
		protected override method MissionObjective CreateSecondaryObjectiveForOpposing()
		{
			private _shortDescription = "Kill any intruders";
			private _longDescription = "With regards to the current higher alert any intruders must be killed immediately.";
			
			return [_shortDescription, _longDescription] new MissionObjective;
		};
		
		protected override method ObjectiveState CheckPrimaryObjectiveStateActing()
		{
			var _atLeastOneReturned = ({ alive _x && _x distance _self.InsertionPointActing < 75 } count _self.ActingUnits) > 0;
			
			if (_mDrawingsAreStolen &&  _atLeastOneReturned) then {
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
		
		protected override method ObjectiveState CheckSecondaryObjectiveStateActing()
		{
			if (!alive _mHelicopter) then {
				_self.LostTokensOpposing pushBack "HELICOPTER";
				[MissionSide.Opposing, "Lost: Helicopter."] call _self.ShowNotification;
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
		
		protected override method ObjectiveState CheckPrimaryObjectiveStateOpposing()
		{
			var _allEnemiesDead = call _self.CountUnitsAliveActing == 0;
			var _missionHasEnded = _self.RemainingTime == 0;
		
			if (_allEnemiesDead || (_missionHasEnded && !_mDrawingsAreStolen)) then {
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
		
		protected override method ObjectiveState CheckSecondaryObjectiveStateOpposing()
		{
			private _allEnemiesDead = call _self.CountUnitsAliveActing == 0;
			
			if (_allEnemiesDead) then {
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
		
		private method MoveAmbientVehicle("_ambientVehicle" as Object)
		{
			var _destinationMarker = selectRandom ["m06o_AmbientVehiclePos1", "m06o_AmbientVehiclePos2", "m06o_AmbientVehiclePos3", "m06o_AmbientVehiclePos4", "m06o_AmbientVehiclePos5", "m06o_AmbientVehiclePos6"];
			var _behavior = selectRandom ["SAFE", "AWARE"];
			var _speedMode = selectRandom ["FULL", "NORMAL", "LIMITED"];
			
			var _waypoint = group _ambientVehicle addWaypoint [getMarkerPos _destinationMarker, 50];
			_waypoint setWaypointBehaviour _behavior;
			_waypoint setWaypointSpeed _speedMode;
		};
		
		protected override method OnEachIteration()
		{
			if (!_mAmbientChopperHasLeft && _self.MissionTimeElapsed >= _mAmbientChopperStartTime) then
			{
				var _pos = selectRandom [[0, 0, 0], [10000, 0, 0], [10000, 10000, 0], [0, 10000, 0]];
				var _waypoint = group _mAmbientChopper addWaypoint [_pos, 0];
				
				_waypoint setWaypointBehaviour selectRandom ["SAFE", "AWARE"];
				_waypoint setWaypointSpeed selectRandom ["FULL", "NORMAL", "LIMITED"];
				
				_mAmbientChopperHasLeft = true;
			};
			
			if (_self.MissionTimeElapsed >= _mAmbientVehicle1StartTime) then
			{
				if (isNull _mAmbientVehicle1) then
				{
					var _vehicleType = selectRandom ["MRAP", "MRAP", "QUADBIKE", "QUADBIKE", "FUEL TRUCK", "TRANSPORT TRUCK", "MRAP HMG"];
					var _spawnMarker = selectRandom ["m06o_AmbientVehiclePos1", "m06o_AmbientVehiclePos2", "m06o_AmbientVehiclePos3", "m06o_AmbientVehiclePos4", "m06o_AmbientVehiclePos5", "m06o_AmbientVehiclePos6"];
					
					_mAmbientVehicle1 = [_vehicleType, MissionSide.Opposing, _spawnMarker, false, true] call _self.CreateSideVehicleOnMarker;
				};
				
				[_mAmbientVehicle1] call _self.MoveAmbientVehicle;
				_mAmbientVehicle1StartTime = _self.MissionTimeElapsed + ceil random 10;
			};
			
			if (_self.MissionTimeElapsed >= _mAmbientVehicle2StartTime) then
			{
				if (isNull _mAmbientVehicle2) then
				{
					var _vehicleType = selectRandom ["MRAP", "MRAP", "QUADBIKE", "QUADBIKE", "FUEL TRUCK", "TRANSPORT TRUCK", "MRAP HMG"];
					var _spawnMarker = selectRandom ["m06o_AmbientVehiclePos1", "m06o_AmbientVehiclePos2", "m06o_AmbientVehiclePos3", "m06o_AmbientVehiclePos4", "m06o_AmbientVehiclePos5", "m06o_AmbientVehiclePos6"];
					
					_mAmbientVehicle2 = [_vehicleType, MissionSide.Opposing, _spawnMarker, false, true] call _self.CreateSideVehicleOnMarker;
				};
				
				[_mAmbientVehicle2] call _self.MoveAmbientVehicle;
				_mAmbientVehicle2StartTime = _self.MissionTimeElapsed + ceil random 10;
			};
		};
		
		public override method Cleanup()
		{
			deleteVehicle _mSoundSource;
			call _base.Cleanup;
		};
	};
};
