/*
 * Name:	NightTensions
 * Date:	2020-07-04
 * Version: 1.0
 * Author:  Engima
 */

using Tvtcf.Common;
using Tvtcf.Server;
using Campaigns;

namespace Campaigns.ShoeLace
{
	public class NightTensions : ShoeLaceMission
	{
		private fields ["_mDrawingsAreStolen" as Boolean, "_mPrimaryObjectiveMarker" as String];
	
		// Creates a NightTensions object.
		public constructor()
		{
			call _base.Constructor;
			_mDrawingsAreStolen = false;
		};
		
		protected override method InitMission("_mission" as MissionSettings)
		{
			_mission.Name = "Night Tensions";
			_mission.StartTimeOfDay = 0;
			_mission.StartMarkersActing = ["m06a_StartArea1", "m06a_StartArea2", "m06a_StartArea3"];
			_mission.StartMarkersOpposing = ["m06o_StartArea1"];
			_mission.SideMarkersActing = ["m06a_PrimaryObjective1", "m06a_PrimaryObjective2", "m06a_PrimaryObjective3", "m06a_RoadBlockWarning"];
			_mission.SideMarkersOpposing = ["m06a_RoadBlockWarning"];
			_mission.AddReturnObjectiveForActing = true;
		};
		
		private method Object CreateTableWithLaptop("_marker" as String)
		{
			private _building = nearestBuilding getMarkerPos _marker;
			private _buildingPos = _building buildingPos (floor random 5);
			
			private _desk = "Land_TableDesk_F" createVehicle [_buildingPos select 0, _buildingPos select 1, 100];
			_desk setDir getDir _building;
			_desk setPosATL _buildingPos;
			_desk setVariable ["ObjectiveMarker", _marker];
			
			private _laptop = "Item_Laptop_Unfolded" createVehicle _buildingPos;
			
			_laptop attachTo [_desk, [0, 0, 0.7]];
			_laptop setDir 180;
			
			return _desk;
		};
		
		protected override method Setup()
		{
			_mPrimaryObjectiveMarker = selectRandom ["m06a_PrimaryObjective1", "m06a_PrimaryObjective2", "m06a_PrimaryObjective3", "m06a_PrimaryObjective4", "m06a_PrimaryObjective5"];
			
			["ASSAULT BOAT", MissionSide.Acting, BaseMarker.Naval] call _self.CreateSideVehicleOnBaseMarker;
			
			// Road Block
			
			["Land_BarGate_F", "m06o_RoadBlock_BarGate"] call _self.CreateVehicleOnMarker;
			["MRAP HMG", MissionSide.Opposing, "m06o_RoadBlock_Vehicle", false, true] call _self.CreateSideVehicleOnMarker;
			private _guard1 = ["RIFLEMAN", MissionSide.Opposing, getMarkerPos "m06o_RoadBlock_Guard"] call _self.CreateAiSoldierBySide;
			_guard1 setDir markerDir "m06o_RoadBlock_Guard";
			["RIFLEMAN", MissionSide.Opposing, getMarkerPos "m06o_RoadBlock_Guard", group _guard1] call _self.CreateAiSoldierBySide;
			
			// Desks and laptops
			
			private _desk1 = ["m06a_PrimaryObjective1"] call _self.CreateTableWithLaptop;
			private _desk2 = ["m06a_PrimaryObjective2"] call _self.CreateTableWithLaptop;
			private _desk3 = ["m06a_PrimaryObjective3"] call _self.CreateTableWithLaptop;
			private _desk4 = ["m06a_PrimaryObjective4"] call _self.CreateTableWithLaptop;
			private _desk5 = ["m06a_PrimaryObjective5"] call _self.CreateTableWithLaptop;
			
			[_desk1, "Steal information", MissionSide.Acting] call _self.AddAction;
			[_desk2, "Steal information", MissionSide.Acting] call _self.AddAction;
			[_desk3, "Steal information", MissionSide.Acting] call _self.AddAction;
			[_desk4, "Steal information", MissionSide.Acting] call _self.AddAction;
			[_desk5, "Steal information", MissionSide.Acting] call _self.AddAction;
			
			// Add an AI group defending the area.
			
			private _guard = ["RIFLEMAN", MissionSide.Opposing, getMarkerPos "m06o_StartArea1"] call _self.CreateAiSoldierBySide;
			private _guardGroup = group _guard;
			["RIFLEMAN", MissionSide.Opposing, getMarkerPos "m06o_StartArea1", _guardGroup] call _self.CreateAiSoldierBySide;
			
			[_guardGroup, "m06o_StartArea1"] execVM "Engima\SearchPatrol\SearchPatrol.sqf";
			
			call _base.Setup;
		};
		
		protected override method String AddBriefingInfoForActing()
		{
			private _briefingText = "The military drawings are in a box in one of the buildings marked 1, 2 and 3.";
			
			if ("HAWKINTEL" in _self.EarlierGainedTokensActing) then {
				_briefingText = "Earlier collected intel reveals that the drawings are in building no" + markerText _mPrimaryObjectiveMarker;
			};
			
			_briefingText = _briefingText + "<br /><br />Before insertion, make sure you squad is in the assault boat.";
			
			return _briefingText;
		};
		
		protected override method String AddBriefingInfoForOpposing()
		{
			return "An ordinary night at the airbase, but the threat of intruders breaking in and stealing materiel is always present.";
		};
		
		protected override method MissionObjective CreatePrimaryObjectiveForActing()
		{
			private _shortDescription = "Steal military drawings";
			private _longDescription = "Find the box with military drawings and steal them.";
			
			return [_shortDescription, _longDescription] new MissionObjective;
		};
		
		protected override method MissionObjective CreatePrimaryObjectiveForOpposing()
		{
			private _shortDescription = "Prevent theft";
			private _longDescription = "Keep the airbase safe and prevent intruders from stealing anything.";
			
			return [_shortDescription, _longDescription] new MissionObjective;
		};
		
		protected override method MissionObjective CreateSecondaryObjectiveForOpposing()
		{
			private _shortDescription = "Kill all intruders";
			private _longDescription = "Kill all intruders.";
			
			return [_shortDescription, _longDescription] new MissionObjective;
		};
		
		public override method OnAction("_actionId" as Scalar, "_target" as Object, "_actor" as Object)
		{
			private _objectiveMarker = _target getVariable "ObjectiveMarker";
			
			if (_objectiveMarker == _mPrimaryObjectiveMarker) then
			{
				_mDrawingsAreStolen = true;
			};
		};
		
		protected override method ObjectiveState CheckPrimaryObjectiveStateActing()
		{
			if (_mDrawingsAreStolen) then {
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
		
		protected override method ObjectiveState CheckPrimaryObjectiveStateOpposing()
		{
			private _allEnemiesDead = call _self.CountUnitsAliveActing == 0;
			private _missionHasEnded = _self.RemainingTime == 0;
		
			if (_allEnemiesDead || (_missionHasEnded && !_mDrawingsAreStolen)) then {
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
		
		protected override method ObjectiveState CheckSecondaryObjectiveStateOpposing()
		{
			private _allEnemiesDead = call _self.CountUnitsAliveActing == 0;
			
			if (_allEnemiesDead) then {
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
	};
};
