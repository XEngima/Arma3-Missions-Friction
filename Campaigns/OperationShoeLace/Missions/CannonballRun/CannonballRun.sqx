/*
 * Name:	CannonballRun
 * Date:	2020-08-11
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A mission in which one side chases the other with a helicopter.
 * Sides: ACTING is running and OPPOSING is hunting.
 *
 * TODO
 * Randomize start and end for the run.
 * Add AA at AAF base.
 */

using Tvtcf.Common;
using Tvtcf.Server;
using Campaigns;

namespace Campaigns.ShoeLace
{
	public class CannonballRun : ShoeLaceMission
	{
		private fields ["_mTruck" as Object, "_mAmbientTrafficCount" as Scalar, "_mAmbientTrafficCountMax" as Scalar];
		private fields ["_mLocationMarkers" as Array, "_mAmbientCivilianVehicleTypes" as Array, "_mAmbientAafVehicleTypes" as Array, "_mAmbientUnits" as Array];
		private fields ["_mActingHasKilledAmbientUnit" as Boolean, "_mOpposingHasKilledAmbientUnit" as Boolean];
	
		// Creates a CannonballRun object.
		public constructor()
		{
			call _base.Constructor;
			_mAmbientUnits = [];
			_mActingHasKilledAmbientUnit = false;
			_mOpposingHasKilledAmbientUnit = false;
			_mAmbientTrafficCount = 0;
			_mAmbientTrafficCountMax = 1 + floor random 4; // Between 1 and 5.
		};
		
		protected override method InitMission("_mission" as MissionSettings)
		{
			_mission.Name = "Cannonball Run";
			_mission.StartTimeOfDay = floor random 24;
			_mission.StartMarkersActing = ["m10a_StartArea1"];
			_mission.StartMarkersOpposing = ["m10o_StartArea"];
			_mission.SideMarkersActing = ["m10_TruckStartPosition", "m10_SouthernLighthouse"];
			_mission.SideMarkersOpposing = ["m10_TruckStartPosition", "m10_SouthernLighthouse", "m10o_PrimaryHelicopter", "m10o_SecondaryHelicopter"];
			
			// Ambient traffic
			_mLocationMarkers = ["m_AirportRoadMarker", "m_NisiBayRoadMarker", "m_GirnaRoadMarker", "m_JayCoveRoadMarker", "m_TheSpartanRoadMarker", "m_LimeriBayRoadMarker", "m_CaminoTwinRoadMarker", "m_KillFarmRoadMarker", "m_NorthWestRoadMarker", "m_AgiaMarinaRoadMarker", "m_ComMastRoadMarker", "m_OldOutpostRoadMarker"];
			[_mLocationMarkers] call OperationShoeLace.ShuffleArray;
			
			_mAmbientCivilianVehicleTypes = ["C_Offroad_01_F", "C_Offroad_01_repair_F", "C_Quadbike_01_F", "C_Hatchback_01_F", "C_Hatchback_01_sport_F", "C_SUV_01_F", "C_Van_01_transport_F", "C_Van_01_box_F", "C_Van_01_fuel_F"];
			_mAmbientAafVehicleTypes = ["O_Truck_03_ammo_F", "I_MRAP_03_F", "I_MRAP_03_hmg_F", "I_Quadbike_01_F"];
		};
		
		protected override method Setup()
		{
			_mTruck = ["DEVICE TRUCK", MissionSide.Acting, "m10a_TruckStartMarker"] call _self.CreateSideVehicleOnMarker;
			["MRAP HMG", MissionSide.Acting, "m10a_EscortStartMarker"] call _self.CreateSideVehicleOnMarker;
			
			if ("HELICOPTER" in _self.LostTokensOpposing) then
			{
				["HELICOPTER WRECK", MissionSide.Opposing, "m_AirbaseHelipad1"] call _self.CreateSideVehicleOnMarker;
			}
			else {
				["HEAVY ATTACK HELICOPTER", MissionSide.Opposing, "m_AirbaseHelipad1"] call _self.CreateSideVehicleOnMarker;
			};
		
			["TRANSPORT HELICOPTER", MissionSide.Opposing, "m_AirbaseHelipad2"] call _self.CreateSideVehicleOnMarker;
			
			// An extra ordnance ammo box
			
			["AMMOBOX LAUNCHERS", MissionSide.Opposing, BaseMarker.AmmoCrate, true] call _self.CreateSideVehicleOnBaseMarker;
			
			call _base.Setup;
			
			[MissionSide.Acting, true] call _base.SetIndependentAlliance;
			[MissionSide.Opposing, true] call _base.SetIndependentAlliance;
		};
		
		protected override method String AddBriefingInfoForActing()
		{
			var _p1 = "The diplomacy with AAF has been making progress, and a ceasefire agreement is close. Now they have asked us for help in planning an attack on our common enemy. They need us to aid them with equipment. This might be a good chance to improve our relations, so can they help us if we need it later.";
			return _p1 + call _base.AddBriefingInfoForActing;
		};
		
		protected override method String AddBriefingInfoForOpposing()
		{
			var _p1 = "Intelligence has found that the enemy is about to deliver booby-trapped equipment to AAF. This is a very good chance to make better relations to AAF. Since we have air superiority for the moment we will send the Hawk and try to take them out. But we will need to hurry, the enemy is already moving. An extra box with launchers has also arrived.";
			
			if ("HELICOPTER" in _self.LostTokensOpposing) then {
				_p1 = _p1 + "<br /><br />Since you lost your helicopter in an earlier mission, you only option now is the transport helicopter at the secondary helipad marked on the map.";
			};
			
			return _p1 + call _base.AddBriefingInfoForOpposing;
		};
		
		protected override method MissionObjective CreatePrimaryObjectiveForActing()
		{
			return ["Deliver truck to AAF.", "Drive the truck to AAF at the Southern Lighthouse. Do it as fast as you can, the enemy is believed to know about the operation already. An armed vehicle is there for escort."] new MissionObjective;
		};
		
		protected override method MissionObjective CreatePrimaryObjectiveForOpposing()
		{
			return ["Destroy the enemy truck.", "Take the helicopter, perform a search for the enemy vehicle and take it out. Just make sure that you under no circumstances kills any civilian or AAF personel."] new MissionObjective;
		};
		
		protected override method ObjectiveState CheckPrimaryObjectiveStateActing()
		{
			if (!canMove _mTruck) then {
				return ObjectiveState.Failed;
			};
			
			if (_mTruck distance getMarkerPos "m10_SouthernLighthouse" < 50) then
			{			
				if (!_mActingHasKilledAmbientUnit) then {
					_self.GainedTokensActing pushBack "AAF ALLIANCE";
					[MissionSide.Acting, "Gained: AAF Alliance"] call _self.ShowNotification;
				};
				
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
		
		protected override method ObjectiveState CheckPrimaryObjectiveStateOpposing()
		{
			if (_mTruck distance getMarkerPos "m10_SouthernLighthouse" < 50) then {
				return ObjectiveState.Failed;
			};
			
			var _truckCanMove = canMove _mTruck;
			var _allEnemyUnitsAreDead = (call _self.CountUnitsAliveActing) == 0;
			
			if (!_truckCanMove || _allEnemyUnitsAreDead) then
			{
				if (!_mOpposingHasKilledAmbientUnit) then {
					_self.GainedTokensOpposing pushBack "AAF ALLIANCE";
					[MissionSide.Opposing, "Gained: AAF Alliance"] call _self.ShowNotification;
				};
				
				return ObjectiveState.Succeeded;
			};
			
			return ObjectiveState.None;
		};
		
		private method SpawnAmbientVehicle()
		{
			private ["_vehicle" as Object, "_vehicleType" as String];
			
			var _marker = _mLocationMarkers select _mAmbientTrafficCount;
			var _side = selectRandom [civilian, independent];
			
			if (_side == independent) then {
				_vehicleType = selectRandom _mAmbientAafVehicleTypes;
			}
			else {
				_vehicleType = selectRandom _mAmbientCivilianVehicleTypes;
			};
			
			_vehicle = [_vehicleType, _marker, false, true] call _self.CreateVehicleOnMarker;
			_mAmbientTrafficCount = _mAmbientTrafficCount + 1;
			
			{
				_mAmbientUnits pushBack _x;
				_x setVariable ["UnitSide", side group _x];
				
				_x addEventHandler ["Killed", {
					params ["_unit" as Object, "_killer" as Object, "_instigator" as Object, "_useEffects" as Boolean];
					_unit setVariable ["KilledBySide", side group _killer];
				}];
				
			} foreach crew _vehicle as Object;
			
			for "_i" from 0 to 9 do {
				var _waypoint = group _vehicle addWaypoint [getMarkerPos (selectRandom _mLocationMarkers), 50];
				_waypoint setWaypointBehaviour selectRandom ["SAFE", "AWARE"];
				_waypoint setWaypointSpeed selectRandom ["FULL", "NORMAL", "LIMITED"];
			};
		};
		
		protected method CheckAmbientUnitKilled()
		{
			{
				var _side = _x getVariable "UnitSide" as Side;
				var _killedBySide = _x getVariable ["KilledBySide", civilian] as Side;
				
				if (_side != _killedBySide && (_killedBySide == west || _killedBySide == east)) then
				{
					private "_sSide" as String;
					
					if (_side == civilian) then {
						_sSide = "civilian";
					}
					else {
						_sSide = "AAF unit";
					};
					
					var _killerMissionSide = [_killedBySide] call _self.GetMissionSide;
					
					if (_killerMissionSide == MissionSide.Acting && !_mActingHasKilledAmbientUnit) then {
						[_killerMissionSide, "Lost: AAF Alliance - " + _sSide + " killed."] call _self.ShowNotification;
						_mActingHasKilledAmbientUnit = true;
						[MissionSide.Acting, false] call _base.SetIndependentAlliance;
					};
					if (_killerMissionSide == MissionSide.Opposing && !_mOpposingHasKilledAmbientUnit) then {
						[_killerMissionSide, "Lost: AAF Alliance - " + _sSide + " killed."] call _self.ShowNotification;
						_mOpposingHasKilledAmbientUnit = true;
						[MissionSide.Opposing, false] call _base.SetIndependentAlliance;
					};
				};
			} foreach _mAmbientUnits;
		};
		
		protected override method OnEachIteration()
		{
			// Spawn one ambient vehicle per minute in the beginning of the mission
			if (_mAmbientTrafficCount < _mAmbientTrafficCountMax) then
			{
				if (_self.MissionTimeElapsed >= _mAmbientTrafficCount) then
				{
					call _self.SpawnAmbientVehicle;
				};
			};
			
			// Check if ambient units has been killed by players
			call _self.CheckAmbientUnitKilled;
		};
		
		public override method Cleanup()
		{
			[MissionSide.Acting, false] call _base.SetIndependentAlliance;
			[MissionSide.Opposing, false] call _base.SetIndependentAlliance;
		};
	};
};
