/*
===============================
 1. Mission Template Explained
===============================

The file structure of this mission template (TypeSqf.MissionTemplate.Mp.Standard) is like follows:

Mission
-Client
-Common
-Communication
-Server
-Sqx

Each folder corresponds to at least one namespace, making it easy to separate code running on server
machines from code runnings on clients. For example, when coding for the server you can use code
from namespaces Mission.Server and Mission.Common. And when coding for the client you can use code
from namespaces Mission.Client and Mission.Common.

------------
 1.1 Client
------------
The Client folder/namespace contains code running on a player machine, i.e. a client or on a hosted
server.

------------
 1.2 Server
------------
The Server folder/namespace contains code running on the server (hosted or dedicated).

------------
 1.3 Common
------------
The Common folder/namespace contains code and objects that need to be known to all machines in the 
mission.

-------------------
 1.4 Communication
-------------------
The Communication folder/namespace contains code necessary for the communication between clients. 
The two main objects in this folder are:

-PublicVariableHandler
-Remote

The PublicVariableHandler is used to encapsulate and handle all distributed (public) variables that 
may be set by different machines during the mission. The Remote object adds functionality for 
communication event handling, i.e. calling event methods across machines. Se comments in both 
classes respectively for more specific information.

---------
 1.5 Sqx
---------
The Sqx folder contains the templated packages dependency Sqx.Services.Service, used to handle
running services.


=========================================================
 2. The common structure of Server/Client/Common folders
=========================================================

The Server, Client and Common folders share similar code file and object structures on the 
following format:

Server/Client/Common
-Classes
--Configs
--Handlers
--Objects
--Services
-Enums

--------------------------
 2.1 Server/Client/Common
--------------------------
Directly under the Server, Client or Common folder is the current namespace's initialization file,
called InitServer.sqx, InitClient.sqx, InitCommon.sqx respectively. The initialization file 
initializes the current namespace's bootstrapper object (ServerObjects, ClientObjects, CommonObjects)
that contains the namespace's necessary singleton instances.

The Server and Client folders also contains static classes for [Server/Client]EventHandlers.sqx and 
[Server/Client]EventRecievers.sqx. The EventHandlers file encapsulats Arma event handlers, and the
EventRecievers file encapsulates all the communication events that can be raised using the
Communications.Remote object.

-------------
 2.2 Classes
-------------
The Classes folder contains folders Configs, Handlers, Objects, Services, used to group classes of
different purposes.

-------------
 2.3 Configs
-------------
Config classes are used to contain configuration settings that should be easy to tweak. For example
a BaseConfig may contain configuration settings for base radius, flag texture and maximun number of
empty vehicles, or a WeaponsConfig may contain information about allowed primary weapons and 
ammo boxes used in different phases of the mission.

A config is always instantiated as a singleton in the bootstrap class (ClientObjects, CommonObjects
or ServerObjects).

--------------
 2.4 Handlers
--------------
A handler is a class that handles a grouped set of actions (methods) and has its own state with some 
kind of internal registry. An axample in this project template is the client's TaskHandler, used to 
encapsulate and handle everything about this mission's player tasks. Another example would be a 
VehicleSpawner[Handler], whith its presumed purpos of spawning vehicles as well as keeping track of 
them during the mission.

A handler is always instantiated as a singleton in the bootstrap class (ClientObjects, CommonObjects
or ServerObjects).

-------------
 2.5 Objects
-------------
Objects are to be seen as "loose" classes floating around in different parameter sets in the code 
structure. An object is as such describing an instance describing some kind of world entity that may
be concrete or abstract. Examples would be e.g. Tree, MissionVehicle, TaskInfo. The latter is an
example in this mission template. An object ending with "Info" is used as information objects in
config classes (in this case the TaskConfig class).

--------------
 2.6 Services
--------------
Services inherit the Sqx.Services.Service class that provides functionality to run code "in the 
background" in a controlled manner. A custom service sub class overrides the Service's Run method,
is started with the base class's RunAsync method (and if supported, canceled with the base class's
Cancel method).

----------------
 2.7 Interfaces
----------------
Each Classes folder contains an Interfaces folder, containing different interfaces for the current
classes. Interfaces are used to abstract direct implementations, making it possible to carry out
similar calls to different sets of code.

Note that while interfaces may play an important role for experienced developers, their existance 
may seem too complex or even unnecessary for Arma players that simply need a little script. If you 
are not comfortable using them, delete them all and reference all classes directly instead.

However, if you are curious, it can be considered a good practice to interface all classes with 
functionality that you have reason to abstract or substitute. A good example is if you use the 
Sqx.UnitTest library for unit testing.


=============================
 3. Compiling And Publishing
=============================

All SQX files must be compiled and built before they can be used in Arma 3. The .sqx format is 
completely unknown to Arma 3, and compiling and building is the process of converting .sqx files
into .sqf files. Use the Build menu in the TypeSqf editor to compile/build all files in the 
project or (if only small changes are made) one single SQX file.

Use the Build menu's Clean project menu item to remove all .sqf files originating from .sqx files.

Use the Build menu's Export to menu items to publish a mission to another folder. During an 
export (or publish) all .sqx files are removed, and only files recognized by Arma remains. The
export function's target folders can be customized in Tools/Options.

*/