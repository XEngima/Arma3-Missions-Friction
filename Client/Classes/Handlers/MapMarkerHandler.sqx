/*
 * Name:	MapMarkerHandler
 * Date:	2020-06-26
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Handles map markers on the client.
 */

using Mission.Common;

namespace Mission.Client
{
	public class MapMarkerHandler
	{
		private fields ["_mUseExtractionMarker" as Boolean, "_mLocalMarkers" as Array];
		
		// Creates a MapMarkerHandler object.
		public constructor()
		{
			_mLocalMarkers = [];
		};
		
		public method AddExtractionMarker("_position" as Array)
		{
			if (_mUseExtractionMarker) then
			{
				private _marker = createMarkerLocal ["_extractionMarkerLocal", _position];
				_marker setMarkerShapeLocal "ICON";
				_marker setMarkerTypeLocal "mil_end";
				
				_mLocalMarkers pushBack _marker;
			};
		};
		
		public method UpdateMarkers("_missionMarkersInfo" as MissionMarkersInfo)
		{
			_mUseExtractionMarker = [playerSide] call _missionMarkersInfo.CheckUseExtractionMarker;
		
			// Remove all earlier markers
			
			{
				deleteMarkerLocal _x;
			} foreach _mLocalMarkers;
			
			_mLocalMarkers = [];
		
			// Draw start markers
			
			private _startMarkerColor = if (playerSide == west) then { "colorBLUFOR" } else { "colorOPFOR" };
			
			{
				if (_x.Side == playerSide) then
				{
					private _name = _x.Name + "_local";
					private _pos = getMarkerPos _x.Name;
					
					private _marker = createMarkerLocal [_name, _pos];
					_mLocalMarkers pushBack _marker;

					_marker setMarkerShapeLocal (markerShape _x.Name);
					_marker setMarkerSizeLocal (markerSize _x.Name);
					_marker setMarkerDirLocal (markerDir _x.Name);
					_marker setMarkerColorLocal _startMarkerColor;
					_marker setMarkerBrushLocal "FDiagonal";
				};
			} foreach _missionMarkersInfo.StartMarkers as MarkerInfo;
			
			// Draw other markers
			
			{
				if (_x.Side == playerSide) then {
					private _name = _x.Name + "_local";
					private _pos = getMarkerPos _x.Name;
					
					private _marker = createMarkerLocal [_name, _pos];
					_mLocalMarkers pushBack _marker;
					
					_marker setMarkerShapeLocal (markerShape _x.Name);
					_marker setMarkerSizeLocal (markerSize _x.Name);
					_marker setMarkerDirLocal (markerDir _x.Name);
					_marker setMarkerColorLocal (markerColor _x.Name);
					_marker setMarkerBrushLocal (markerBrush _x.Name);
					_marker setMarkerTypeLocal (markerType _x.Name);
					_marker setMarkerTextLocal (markerText _x.Name);
				};
			} foreach _missionMarkersInfo.Markers as MarkerInfo;
		};
	};
};
