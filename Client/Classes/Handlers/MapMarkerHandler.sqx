/*
 * Name:	MapMarkerHandler
 * Date:	2020-06-26
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Handles map markers on the client.
 */

using Tvtcf.Common;

namespace Tvtcf.Client
{
	public class MapMarkerHandler
	{
		private fields ["_mBaseMarkersConfig" as IBaseMarkersConfig, "_mLocalMarkers" as Array, "_mExplicitMissionMarkers" as Array];
		
		// Creates a MapMarkerHandler object.
		public constructor("_baseMarkersConfig" as IBaseMarkersConfig)
		{
			_mBaseMarkersConfig = _baseMarkersConfig;
			_mLocalMarkers = [];
			_self.MissionHasReturnObjective = false;
			_self.InsertionMapPosition = [];
			_self.BaseMarker = "";
			_mExplicitMissionMarkers = [];
		};
		
		public property Array InsertionMapPosition { get; private set; };
		
		public property String BaseMarker { get; private set; };
		
		public property Boolean MissionHasReturnObjective { get; private set; };
		
		public method AddExtractionMarker("_position" as Array)
		{
			private _marker = createMarkerLocal ["_extractionMarkerLocal", _position];
			_marker setMarkerShapeLocal "ICON";
			_marker setMarkerTypeLocal "mil_start";
			
			_mLocalMarkers pushBack _marker;
		};
		
		public method UpdateMarkers("_missionMarkersInfo" as MissionMarkersInfo)
		{
			_self.MissionHasReturnObjective = [playerSide] call _missionMarkersInfo.CheckUseExtractionMarker;
		
			// Remove all earlier markers
			
			if (_self.BaseMarker != "") then {
				deleteMarkerLocal _self.BaseMarker;
			};
			
			{
				deleteMarkerLocal _x;
			} foreach _mLocalMarkers;
			
			_mLocalMarkers = [];
			
			// Draw start markers
			
			private _startMarkerColor = if (playerSide == west) then { "colorBLUFOR" } else { "colorOPFOR" };
			var _startMarkers = [];
			
			{
				if (_x.Side == playerSide) then
				{
					private _name = _x.Name + "_local";
					private _pos = getMarkerPos _x.Name;
					
					private _marker = createMarkerLocal [_name, _pos];
					_mLocalMarkers pushBack _marker;
					_startMarkers pushBack _marker;

					_marker setMarkerShapeLocal (markerShape _x.Name);
					_marker setMarkerSizeLocal (markerSize _x.Name);
					_marker setMarkerDirLocal (markerDir _x.Name);
					_marker setMarkerColorLocal _startMarkerColor;
					_marker setMarkerBrushLocal "DiagGrid";
				};
			} foreach _missionMarkersInfo.StartMarkers as MarkerInfo;
			
			// Base marker
			
			var _respawnMarker = [playerSide, BaseMarker.Respawn] call _mBaseMarkersConfig.GetMarkerName;
			_self.BaseMarker = createMarkerLocal ["_baseMarkerLocal", getMarkerPos _respawnMarker];
			_self.BaseMarker setMarkerTypeLocal "b_hq";
			
			// Insertion marker
			
			var _pos = [0, 0, 0];
			
			if (count _startMarkers > 0) then {
				_pos = [_startMarkers] call Functions.FindClosestToMarkersPos;
			}
			else {
				var _respawnMarker = [playerSide, BaseMarker.Respawn] call _mBaseMarkersConfig.GetMarkerName;
				_pos = getMarkerPos _respawnMarker;
			};
			
			_self.InsertionMapPosition = _pos;
			
			// Draw other markers
			
			{
				if (_x.Side == playerSide) then {
					private _name = _x.Name + "_local";
					private _pos = getMarkerPos _x.Name;
					
					private _marker = createMarkerLocal [_name, _pos];
					_mLocalMarkers pushBack _marker;
					
					_marker setMarkerShapeLocal (markerShape _x.Name);
					_marker setMarkerSizeLocal (markerSize _x.Name);
					_marker setMarkerDirLocal (markerDir _x.Name);
					_marker setMarkerColorLocal (markerColor _x.Name);
					_marker setMarkerBrushLocal (markerBrush _x.Name);
					_marker setMarkerTypeLocal (markerType _x.Name);
					_marker setMarkerTextLocal (markerText _x.Name);
				};
			} foreach _missionMarkersInfo.Markers as MarkerInfo;
		};
		
		public method AddExplicitMissionMarkers("_missionMarkers" as MissionMarkerCollection)
		{
			{
				deleteMarker _x;
			} foreach _mExplicitMissionMarkers;
		
			_mExplicitMissionMarkers = [];

			// Set markers from the mission markers collection
			{
				if (!([_x.Name] call Sqx.Markers.MarkerHelper.MarkerExists)) then
				{
					var _marker = createMarker [_x.Name, _x.Position];
					
					_marker setMarkerShape _x.Shape;
					_marker setMarkerSize _x.Size;
					_marker setMarkerDir _x.Direction;
					_marker setMarkerType _x.Type;
					_marker setMarkerColor _x.Color;
					_marker setMarkerBrush _x.Brush;
					_marker setMarkerText _x.Text;
					_marker setMarkerAlpha 0;
					
					_mExplicitMissionMarkers pushBack _marker;
				};
			} foreach _missionMarkers.Markers as Marker;
		};
	};
};
