/*
 * Name:	TaskMonitor
 * Date:	2020-02-14
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A service that monitors when player completes tasks.
 */

using Sqx.Services;
using Mission.Communication;
using Mission.Common;

namespace Mission.Client
{
	public class TaskMonitor : Service
	{
		private fields ["_mTaskHandler" as ITaskHandler];
	
		// Creates a TaskMonitor object.
		public constructor("_taskHandler" as ITaskHandler)
		{
			call _base.Constructor;
			
			_mTaskHandler = _taskHandler;
		};
		
		// Run in the background and check every second if a task state should be set.
		protected override method Run()
		{
			private ["_missionInfo" as MissionInfo];
			
			private _allTasksSucceeded = false;
			private _moveToBlueArrowSucceeded = false;
			private _moveToRedArrowSucceeded = false;

			// Wait until the server has started the mission and determined where the arrows will spawn.
			waitUntil { call PublicVariableHandler.HasValueMissionInfo };
			
			// The the mission information from the public variable broadcast by the server now when we know it exists.
			_missionInfo = call PublicVariableHandler.GetMissionInfo;
			
			while { !_allTasksSucceeded } do
			{
				if (!_moveToBlueArrowSucceeded) then
				{
					if (player distance _missionInfo.BlueArrowPos < 10) then
					{
						[PlayerTask.FindBlueArrow, TaskState.Succeeded] call _mTaskHandler.SetTaskState;
						_moveToBlueArrowSucceeded = true;
					};
				};
				
				if (!_moveToRedArrowSucceeded) then
				{
					if (player distance _missionInfo.RedArrowPos < 10) then
					{
						[PlayerTask.FindRedArrow, TaskState.Succeeded] call _mTaskHandler.SetTaskState;
						_moveToRedArrowSucceeded = true;
					};
				};
				
				sleep 1;
				
				_allTasksSucceeded = _moveToBlueArrowSucceeded && _moveToRedArrowSucceeded;
			};
			
			// Always end the Run method in a service with a call to service's base.
			call _base.Run;
		};
	};
};
