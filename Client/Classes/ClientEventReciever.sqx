/*
 * Name:	ClientEventReciever
 * Date:	2019-01-31
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Static class that handles all custom events sent from other machines.
 *
 * Remarks:
 * The idea here is to avoid being specific about what is supposed to happen on the target machine. The name of each 
 * method should start with "On" to reflect an event that "happens" on the machine firing it. E.g. do not name a method like 
 * "ThrowPlayerInTeamKillPrison". Instead name it after the reason, so better use "OnPlayerKilled" with killer and
 * victim as parameters. This way
 * the server do not care about what happens on the client, it simply reports what happens on the server. And also,
 * the client may want to do more than one thing with this event. E.g. lowering the killers rating. This way you do not 
 * couple the server and client together, so that the server can focus only on server stuff and the client only on client
 * stuff.
 *
 * Do not perform logic in this class - (or at least not advanced logic). Instead route the event message action to
 * the class or classes meant to handle the logic needed for each event message respectively.
 */

using Mission.Common;
using Mission.Common.Statics;
using Mission.Client;

namespace Mission.Client.Statics
{
	public class ClientEventReciever
	{
		// Called when the mission engine on the server starts.
		public static method OnMissionStart()
		{
		
		};
	
		// Called each time a second passes in the mission.
		// _missionTimeRemaining (Scalar): The remaining time until the mission ends in seconds.
		public static method OnMissionTimeTick("_missionTimeRemaining" as Scalar)
		{
			hint ("Mission ends in " + (str _missionTimeRemaining) + " minutes.");
		};
		
		public static method OnMissionSetup("_missionMarkersInfo" as MissionMarkersInfo)
		{
			[_missionMarkersInfo] call ClientObjects.MapMarkerHandler.UpdateMarkers;
		};
		
		public static method OnInsertGroup("_group" as Group, "_position" as Array)
		{
			private ["_teleporter" as TeleportService];
			
			if (playerSide == side _group) then
			{
				_teleporter = [_position] new TeleportService;
				call _teleporter.RunAsync;
				
				{
					if (local _x && _x != player) then {
						_x setPos _position;
					};
				} foreach units _group;
			};
			
			// Hide insertion menu option
			call FrictionMenuHandler.UpdateVisibleOptions;
		};
		
		public static method OnMissionEnded("_missionResult" as MissionResult, "_accumulatedScoreWest" as Scalar, "_accumulatedScoreEast" as Scalar)
		{
			private ["_teleporter" as TeleportService, "_resultInfo" as MissionResultInfo];
			
			// Show mission result
			
			if (!(player diarySubjectExists "Results")) then {
				player createDiarySubject ["Results", "Mission Results"];
			};
			
			_resultInfo = [playerSide] call _missionResult.GetResultInfo;
			
			private _diaryText = _missionResult.MissionName + "<br />";
			_diaryText = _diaryText + "<br />" + _resultInfo.PrimaryObjectiveName + ": ";

			if (_resultInfo.PrimaryObjectiveCompleted) then {
				_diaryText = _diaryText + "Success";
			} else {
				_diaryText = _diaryText + "Fail";
			};
			
			if (_resultInfo.SecondaryObjectiveName != "") then
			{
				_diaryText = _diaryText + "<br />" + _resultInfo.SecondaryObjectiveName + ": ";
				
				if (_resultInfo.SecondaryObjectiveCompleted) then {
					_diaryText = _diaryText + "Success";
				} else {
					_diaryText = _diaryText + "Fail";
				};
			};
			
			_diaryText = _diaryText + "<br />Men lost: " + str (_resultInfo.MenAtStart - _resultInfo.MenAtEnd);
			_diaryText = _diaryText + "<br /><br />Score: " + str _resultInfo.Score;

			player createDiaryRecord ["Results", [_missionResult.MissionName, _diaryText]];

			// Teleport to base
			
			private _baseMarkerName = [playerSide, BaseMarker.Respawn] call CommonObjects.BaseMarkersConfig.GetMarkerName;
			
			_teleporter = [getMarkerPos _baseMarkerName] new TeleportService;
			call _teleporter.RunAsync;
			
			{
				if (local _x) then {
					_x setVariable ["IsAlive", false];
				};
			} foreach units group player;
			
			// Show insertion menu option
			call FrictionMenuHandler.UpdateVisibleOptions;
			
			// Delete tasks
			call ClientObjects.TaskHandler.DeleteAllTasks;
		};
		
		public static method OnMissionBriefing("_missionBriefing" as MissionBriefing)
		{
			private ["_primaryObjective" as MissionObjective, "_secondaryObjective" as MissionObjective];
			
			_primaryObjective = [playerSide] call _missionBriefing.GetPrimaryObjective;
			_secondaryObjective = [playerSide] call _missionBriefing.GetSecondaryObjective;
			
			if (!isNull _primaryObjective) then {
				[_primaryObjective, ObjectivePrio.Primary] call ClientObjects.TaskHandler.CreateTask;
			};
			
			if (!isNull _secondaryObjective) then {
				[_secondaryObjective, ObjectivePrio.Secondary] call ClientObjects.TaskHandler.CreateTask;
			};
		};
		
		public static method OnTaskStateChanged("_side" as Side, "_objectivePrio" as ObjectivePrio, "_taskState" as TaskState)
		{
			if (_side == playerSide) then {
				[_objectivePrio, _taskState] call ClientObjects.TaskHandler.SetTaskState;
			};
		};
		
		public static method OnCampaignEnded("_westAccumulatedScore" as Scalar, "_eastAccumulatedScore" as Scalar)
		{
			if (playerSide == west) then {
				[_westAccumulatedScore >= _eastAccumulatedScore] call ClientObjects.MissionEndHandler.EndGame;
			}
			else {
				[_eastAccumulatedScore >= _westAccumulatedScore] call ClientObjects.MissionEndHandler.EndGame;
			};
		};
	};
};
