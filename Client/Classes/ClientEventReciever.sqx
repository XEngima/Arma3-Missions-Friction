/*
 * Name:	ClientEventReciever
 * Date:	2019-01-31
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Static class that handles all custom events sent from other machines.
 *
 * Remarks:
 * The idea here is to avoid being specific about what is supposed to happen on the target machine. The name of each 
 * method should start with "On" to reflect an event that "happens" on the machine firing it. E.g. do not name a method like 
 * "ThrowPlayerInTeamKillPrison". Instead name it after the reason, so better use "OnPlayerKilled" with killer and
 * victim as parameters. This way
 * the server do not care about what happens on the client, it simply reports what happens on the server. And also,
 * the client may want to do more than one thing with this event. E.g. lowering the killers rating. This way you do not 
 * couple the server and client together, so that the server can focus only on server stuff and the client only on client
 * stuff.
 *
 * Do not perform logic in this class - (or at least not advanced logic). Instead route the event message action to
 * the class or classes meant to handle the logic needed for each event message respectively.
 */

using Mission.Common;

namespace Mission.Client.Statics
{
	public class ClientEventReciever
	{
		// Called when the mission engine on the server starts.
		public static method OnMissionStart()
		{
		
		};
	
		// Called each time a second passes in the mission.
		// _missionTimeRemaining (Scalar): The remaining time until the mission ends in seconds.
		public static method OnServerTimeTick("_missionTimeRemaining" as Scalar)
		{
			hint ("Mission ends in " + (str _missionTimeRemaining) + " seconds.");
			
			if (_missionTimeRemaining == 0) then {
				call ClientObjects.MissionEndHandler.EndGame;
			};
		};
		
		public static method OnMissionSetup("_missionMarkersInfo" as MissionMarkersInfo)
		{
			[_missionMarkersInfo] call ClientObjects.MapMarkerHandler.UpdateMarkers;
		};
		
		public static method OnInsertGroup("_group" as Group, "_position" as Array)
		{
			if (playerSide == side _group) then {
				{
					if (local _x) then {
						_x setPos _position;
					};
				} foreach units _group;
			};
		};
	};
};
